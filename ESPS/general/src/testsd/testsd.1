.\" Copyright (c) 1987 Entropic Speech, Inc.; All rights reserved
.\" @(#)testsd.1	3.13 3/28/97 ESI
.TH TESTSD 1\-ESPS 3/28/97
.ds ]W (c) 1992 ERL, Inc.
.SH "NAME"
testsd - make test signal (sine wave, square wave, noise, pulses, ASCII input, etc.)
.SH "SYNOPSIS"
.B testsd
[
.BI \-P " param_file"
] [
.BI \-x " debug_level"
] [
.BI \-T " signal_type"
] [
.BI \-f " frequency"
] [
.BI \-A " phase"
] [
.BI \-l " level"
] [
.BI \-C " sweep_rate"
] [
.BI \-d " decay_time"
] [
.BI \-r " sampling_rate"
] [
.BI \-{ps} " length"
] [
.BI \-a " asciifile"
] [
.BI \-S " seed"
] [ 
.BI \-t " data_type"
] [
.B \-c
] [
.B \-i
] 
.I "sdfile"
.SH "DESCRIPTION"
.PP
.I Testsd
produces test sampled data and puts it into the real or complex,
single-channel FEA_SD file \fIsdfile\fP.  For many of the signal
types, one can specify an exponential amplitude decay and a linear
frequency sweep.
.PP
If "\-" is supplied in place of
.I sdfile,
then standard output is used.  The default data type in the output
FEA_SD file is FLOAT (or FLOAT_CPLX).  Any output data type can 
be specified with the \fB-t\fP option (see also \fB-c\fP and
\fB-i\fP).  
.PP
The following signal types are supported:
.TP
Sine waves or complex exponentials (\fB-T\fP sine)
If real sine waves are specified, the output data are
\fIlevel\fP*\fIsin\fP[ pi (2fn/r + P/180)], where "pi" stands for the
obvious thing, f is the frequency, n is the sample number, r is the
sampling rate, and P is the phase (in degrees).  Complex exponentials
of the form \fIlevel\fP*\fIexp\fP[i pi (2fn/r + P/180)] will be 
generated if the signal type is "sine" and a complex \fIdata_type\fP
is specified. 
.TP
Square waves (\fB-T\fP square)
In the terms defined above, the output data are
\fIlevel\fP*\fIsquare\fP[pi (2fn/r + P/180)], where \fIsquare\fP() is
a function with positive constant value from 0 to 180 degrees, and
negative constant value from 180 to 360 degrees.  
.TP
Triangular waves (\fB-T\fP triangle) 
The output data are \fIlevel\fP*\fItriangle\fP[pi (2fn/r + P/180)],
where \fItriangle\fP() is a piecewise constant function that
"approximates" a sine wave with alternating positive and negative
slope segments.  
.TP
Saw tooth wave (\fB-T\fP sawtooth)
The output data are \fIlevel\fP*\fIsaw\fP[pi (fn/r + P/180)],
where \fIsaw\fP() is a constant-slope (ramp) function 
with value zero at 0 degrees and value one at 360 degrees.  
.TP
Pulse train (\fB-T\fP pulses)
Positive pulses of amplitude \fIlevel\fP are spaced equally through
.I sdfile, 
starting at record 1 and with spacing equal to the reciprocal of the 
.I frequency 
(rounded to the closest sample).  More precisely, the output data are
zero everywhere except at the sample closest to the points at which the
angle function pi*(fn/r + P/180) goes through multiples of 2*pi.
.TP
Constant (\fB-T\fP constant)
A constant value \fIlevel\fP is generated.  
.TP
Gaussian noise (\fB-T\fP gauss) 
Gaussian noise is generated with
\fIlevel\fP being the rms value. 
.TP
Uniform noise (\fB-T\fP uniform)
Uniform noise is generated in the interval [-\fIlevel\fP,
\fIlevel\fP].  
.TP
ASCII input data (\fB-a\fP) 
Arbitrary data can be provided using the
input ASCII file
.I asciifile.   
(If "\-" is supplied in place of
.I asciifile,
then standard input is used).  
.PP
If a complex output data type is specified (see \fB-t\fP and
\fB-c\fP), the action taken depends on the \fIsignal_type\fP.  For
SINE, complex exponentials are generated (as described above).  For
the signal types SQUARE, TRIANGLE, SAWTOOTH, CONSTANT, and PULSES the
real and imaginary parts are identical.  For noise types (GAUSS and
UNIFORM), independent noise is generated for the real and imaginary
parts.  For ASCII input, it is assumed that the real and imaginary
parts alternate in the input, with the first value being real.
.PP
For all signal types but ASCII, a decaying exponential envelope can be
imposed by means of the \fB-d\fP option.  In this case, each generated
sample is multiplied by \fIexp\fP[- n/rT], where T is the
\fIdecay_time\fP, n is the sample number, and r is the sampling rate.
(Growing exponentials can also be generated by means of a negative
\fIdecay_time\fP, but be careful since no checks are made for
overflow.)
.PP
For the periodic signal types (SINE, SQUARE, TRIANGLE, SAWTOOTH, and
PULSES), the instantaneous frequency can be swept linearly with time
if the \fB-C\fP option is used.  That is, the instantaneous frequency
(derivative of the phase) is given by \fIf + Cn/r\fP, where f is the
initial frequency (e.g., from the \fB-f\fP option), C is the sweep
rate, n is the sample number, and r is the sampling rate.  Note that,
since the frequency is modified at every sample (rather than, for
example, at the end of every period), the waveform shapes for 
TRIANGLE and SAWTOOTH will be distorted from their usual
piecewise-linear shapes.  For PULSES, the point at which the pulse
appears is rounded to the nearest sample.
.PP
Except for the case of ASCII input data, the output from \fItestsd\fP
is buffered, which means that one can generate an extremely long
signal without running out of memory (one might, for example, want to
do this as the input to a pipe).  In the case of ASCII data, the
output is not buffered \- all the data are input before the output
file is generated.  For applications in which this is a problem, one
can instead use \fIaddfea\fP(1\-\s-1ESPS\s+1), which does buffer the
data (it does it one sample at a time, however, so it will be slower
than \fItestsd\fP for the same input).  Another advantage of
\fIaddfea\fP, is that one can use it to convert ASCII data to a
multi-channel FEA_SD file.  For example, the command
.nf

	%addfea \-T FEA_SD \-f samples \-t float_cplx \-s 2 data.ascii data.fea

.fi
converts ASCII data to a two-channel, complex FEA_SD file.  
.SH OPTIONS
.PP
The following options are supported:
.TP
.BI \-P " param_file \fR[params]\fP"
uses the parameter file 
.I param_file
rather than the default, which is
.I params.
.TP
.BI \-x " debug_level \fR[0]\fP"
If 
.I debug_level
is positive,
.I testsd
prints debugging messages and other information on the standard error
output.  The messages proliferate as the  
.I debug_level
increases.  If
.I debug_level
is 0, no messages are printed.  Only levels 0 and 1 are supported.   
.TP
.BI \-T " signal_type \fR[sine]\fP"
Specifies the signal_type of test data.  Possible values are "sine"
(for a sine wave or complex exponential), "square" (for square waves),
"triangle" (for triangle waves), "sawtooth" for sawtooth waves,
"pulses" (for a pulse train), "constant" (for a sequence of constant
values), "gauss" (for Gaussian noise), and "uniform" (for uniform noise).
The \fB-T\fP option may not be used 
if 
.B \-a 
is specified (for ASCII input).  
.TP
.BI \-f " frequency \fR[500]\fP"
Specifies the frequency in the case of periodic signals (sine, square,
triangle, sawtooth, pulses).  This option is ignored if 
.B \-a
is specified.  
.TP
.BI \-A " phase\fR[0]\fP"
Specifies the phase in the case of all periodic signals (sine, square,
triangle, sawtooth, pulses).  The phase is given in units of degrees.
.TP
.BI \-l " level \fR[500]\fP"
Selects the power level of the test data.  For Gaussian noise, 
.I level
is the RMS amplitude (standard deviation).  For uniform noise, values 
are generated in the interval [-\fIlevel\fP, \fIlevel\fP].  
For periodic signals (sine, square, triangle, sawtooth, pulses), 
.I level
is the maximum amplitude of the waveform.  For constant data, all
samples have the value \fIlevel\fP.  This option is ignored if
.B \-a
is specified. 
.TP
.BI \-r " samp_rate \fR[8000]\fP"
Specifies the sampling rate.  The default is 8000 Hz.  
.TP
.BI \-C " sweep_rate \fR[0]\fP"
Specifies the linear sweep rate ("linear chirp") for periodic signal
types (sine, square, triangle, sawtooth, and pulses).
.TP
.BI \-d " decay_time \fR[0]\fP"
Specifies the decay time for an optional exponential factor that is
applied to all samples (except ASCII input).  The \fIdecay_time\fP is
the time (in seconds) it takes for the factor to decay to from 1.0 to
1/e.  If a negative number is supplied for \fIdecay_time\fP,
exponential growth (instead of decay) will result.  Note that no
checks for overflow are made in this case (so beware!).
.TP 
.BI \-p " length \fR[8000]\fP"
Specifies that 
.I sdfile
contain 
.I length 
points.   This option is 
not allowed if 
.B \-a 
is specified.  
.TP
.BI \-s " length"
Specifies that 
.I sdfile
contain 
.I length
seconds of sampled data.   This option is 
not allowed if 
.B \-a 
is specified.  
.TP
.BI \-a " asciifile"
Specifies that the sampled data is to be taken from the input ASCII
file 
.I asciifile.  
Numbers in 
.I asciifile
may be integer or real, with numbers separated by white space or 
new lines.  
.TP
.BI \-S " seed \fR[1234567]\fP"
Specifies the starting seed for the random number generator (relevant
if Gaussian noise is being generated).
.TP
.BI \-t " data_type \fR[float]\fP"
Specifies the output data type.  Possible values are all of the
supported FEA types.  In particular, possible values for real types
are DOUBLE, FLOAT, LONG, SHORT, and BYTE, (signed CHAR); possible
values for complex types are DOUBLE_CPLX, FLOAT_CPLX, LONG_CPLX,
SHORT_CPLX, and BYTE_CPLX.  The values can be given in upper or lower
case as arguments to the \fB-t\fP option.  For convenience, a complex
output type can be specified by giving the corresponding real type in
the \fB-t\fP option and at the same time specifying the \fB-c\fP
option.  
.IP
If a complex output type is specified, the handling of the imaginary
part depends on the signal type.  For SINE, complex exponentials are
generated (as described above).  For SQUARE, TRIANGLE, SAWTOOTH,
PULSES, and CONSTANT, the real and imaginary parts are
identical.  For noise types (GAUSS and UNIFORM), independent noise is
generated for the real and imaginary parts.  For ASCII input, it is 
assumed that the real and imaginary parts alternate in the input, with
the first value being real.
.TP 
.BI \-c
Specifies that a complex FEA_SD file is to be generated.  If used
together with the \fB-a\fP option, it is assumed that the real and
imaginary parts alternate in the ASCII input.  If used in conjunction 
with a specified real output type (e.g., \fB-t\fP long), the output 
is set to the corresponding complex type (e.g., long_cplx).  This
option is ignored if a complex type is specified by other means (e.g.,
\fB-t\fP long_cplx).  
.TP
.BI \-i
Specifies that the data type in 
.I sdfile
is a SHORT (or SHORT_CPLX if \fB-c\fP is used).  This option is
provided for compatibility with previous versions (in which FLOAT was
the default type), and should be avoided.  If used, it will override
other type specifications.
.SH "ESPS PARAMETERS"
.PP
The parameter file is not required to be present, as there are default
parameter values that apply.  The defaults are those mentioned under
OPTIONS.  If the parameter file does exist, the following parameters are
read:
.IP
.I "signal_type - char *"
.IP
A string giving the type of test data as discussed under \fB\-T\fP.  This
parameter is not read if the \fB\-T\fP option is used.
.IP
.I "freq - double"
.IP
The \fIfrequency\fP as discussed under \fB\-f\fP.  This parameter is
read only in the case of periodic signals. It is not read if the
\fB\-f\fP option is used.
.IP
.I "phase - double"
.IP
The phase of real sine waves or complex exponentials.  This parameter
is read only in the case of periodic signals.  It is not read if the
\fB\-A\fP option is used.
.IP
.I "samp_rate - int"
.IP
The sampling rate.  This parameter is not read if the \fB\-r\fP option
is used.
.IP
.I "level - double"
.IP
The \fIlevel\fP as discussed under \fB\-l\fP.  This parameter is not
read if the \fB\-l\fP option is used.
.IP
.I "sweep_rate - double"
.IP
The \fIsweep_rate\fP as discussed under \fB-C\fP.  This is read only
for periodic signals.  It is not read if the \fB-C\fP
option is used.
.IP
.I "decay_time - double"
The \fIdecay_time\fP as discussed under \fB-d\fP.  This is read only 
for periodic signals.  It is not read if the \fB-d\fP option is used.  
.IP
.I "length - int"
.IP
The number of points to generate \- the \fIlength\fP as discussed
under \fB\-p\fP.  This parameter is not read if the \fB\-p\fP option
is used.
.IP
.I "seed - int"
.IP
The \fIseed\fP as discussed under \fB\-S\fP.  This parameter is only
read only in the case of noise signals (GAUSS, UNIFORM).  It is not
read if the \fB\-S\fP option is used.
.IP
.I "ascii_file - char *"
.IP
The name of the ASCII file containing input data.  This parameter is 
read only if \fIsignal_type\fP is ASCII and the \fB-a\fP option 
is not used.  
.IP
.I "data_type - char *"
.IP
The name of the desired output data type.  The parameter is not read
if the \fB-t\fP, \fB-c\fP, or \fB-i\fP options are is used.
.PP
The values of parameters obtained from the parameter file are printed
if the environment variable ESPS_VERBOSE is 3 or greater.  The default
value is 3.
.SH "ESPS COMMON"
.PP
ESPS Common is not read by 
.I testsd. 
If Common processing is enabled and if the output is not to standard
output, then
.I testsd
writes the following values into ESPS Common: 
.RS 5
\fI
.nf
filename = sdfile
prog = \fR"testsd"\fP
start = \fR1\fP
nan = \fR<total number of points generated>\fP
.fi
\fR
.RE
.PP
ESPS Common processing may be disabled by setting the environment variable
USE_ESPS_COMMON to "off".  The default ESPS Common file is .espscom 
in the user's home directory.  This may be overridden by setting
the environment variable ESPSCOM to the desired path.  User feedback of
Common processing is determined by the environment variable ESPS_VERBOSE,
with 0 causing no feedback and increasing levels causing increasingly
detailed feedback.  If ESPS_VERBOSE is not defined, a default value of 3 is
assumed.
.SH ESPS HEADERS
.PP
\fITestsd\fP writes the usual FEA_SD header items.  Unless ASCII data
is being converted, "max_value" is set to a maximum possible value
(e.g., \fIlevel\fP in the case of sine waves), rather than to the
actual maximum (which might be less); note that in the case of complex
data types, the item "max_value" is the complex modulus.  If the type
is ASCII, then the actual maximum value is put into the header.
.PP
If the type is not ASCII, then
.I testsd
writes the 
.I level
to the generic header item "level".  
.I Testsd 
also writes the generic header item "signal_type", which identifies
the type of test data (SINE, GAUSS, PULSES, ASCII, etc. ).  
If the type is GAUSS or UNIFORM, then 
.I testsd
writes the random number seed to the generic header item "seed".  
If the type is SINE, SQUARE, TRIANGLE, SAWTOOTH, or PULSES, then 
.I testsd 
writes the 
.I frequency
to the generic header item "frequency", and the \fIphase\fP to the item
"phase".  If a \fIdecay_time\fP  or \fIsweep_rate\fP is used, the
value is written to a generic header item of the same name.  
.SH "FUTURE CHANGES"
.PP
Additional types of test data will be generated.  
.SH "SEE ALSO"
.nf
ESPS(5\-\s-1ESPS\s+1), FEA_SD(5\-\s-1ESPS\s+1), addsd(1\-\s-1ESPS\s+1),
\fIatoarray\fP(3\-\s-1ESPSu\s+1), \fIfeafunc\fP(1\-\s-1ESPS\s+1) \fIgauss\fP(3\-\s-1ESPSsp\s+1)
.fi
.SH "WARNINGS AND DIAGNOSTICS"
.PP
.I Testsd
will exit with appropriate messages if 
.B \-p
and
.B \-s
are both used, if 
.B \-f
is used with 
.BR \-T gauss,
if 
.B \-a 
is used with 
.B \-T,
and if 
.B \-a 
is used with either 
.B \-p
or
.B \-s.
.SH "BUGS"
.PP
None known.  
.SH "REFERENCES"
.PP
.SH "AUTHOR"
.PP
Program and manual page by John Shore


.lo
.de SM          \"macro to shrink left margin
.br
.nr $i \\n($i+\\$1i
..
.de RM          \"macro to restore original left margin
.br
.nr $i 0
..
.de MS		\"macro for main section (sans serif bold)
.ft SB
.nf
\\$1
.sp -.8
.fi
..
.de SS		\"macro for sub-section (sans serif italics)
.ft SI
.nf
\\$1
.sp -.8
.fi
..
.sc
.he 'XIG NOTE''page %'
.fo '1.2'ERL1/22/93'
.nf
.ce 
\s+4\fB ENTROPIC RESEARCH LABORATORY, INC.\fR\s-4
.sp 1i
.ce 100
\s+1\fB

ESPS APPLICATIONS NOTE: X Interface Generation in ESPS and \fIxwaves\fP+
\fP\s-1
.sp .3i
\fIJohn Shore \fP
.sp .3i
Entropic Research Laboratory, Inc.
600 Pennsylvania Ave. S.E., Suite 202
Washington, D.C. 20003
(202)547-1420
.sp .5i
.fi
.lp
.sh 1 INTRODUCTION
.lp
.lp
ESPS Version 4.1 and \fIxwaves\fP+ Version 2.1 contain a variety of
X-Windows Interface Generation (XIG) features for customizing and
extending the user-interface.  By using a variety of simple ASCII
configuration files, it is easy to produce highly-customized
\fIxwaves\fP+/ESPS packages that meet personal or application-specific
needs.  This technical note summarizes the these XIG features and
explains how to use them.
.sh 1 "OVERVIEW OF ESPS AND \fIxwaves\fP+ FACILITIES"
.lp
In this section, we list the relevant ESPS (or \fIxwaves\fP+) 
programs, library functions, environment variables, \fIxwaves\fP+ 
globals, \fIxwaves\fP+ commands, etc. 
.sh 2 "User-Level Programs"
.lp
Here is a list of the user-level programs relevant to XIG.  For more
information about each of them, see the ESPS reference manual or use
\fIeman\fP (1\-\s-1ESPS\s+1) to view the on-line man pages.
.nf
.ta 1.25i

\fIeinfo\fP \-	X-based tool for reading ESPS release notes, tech notes. etc. 
\fIedemos\fP \-	put up a button control panel for ESPS demos

\fIxtext\fP \-	create window for text file or output of any text-producing command

\fIfbuttons\fP \-	create window with buttons that run programs on specific files
\fImbuttons\fP \-	create window with buttons for running arbitrary programs

\fIexprompt\fP \-	interactive ESPS parameter entry in a pop-up window
\fIexpromptrun\fP \-	runs program after interactive parameter prompts
\fIxeparam\fP \-	run an ESPS program with interactive parameter prompt window
\fIgetparam\fP \-	prints value of ESPS parameter from parameter file or ESPS Common

\fIxrefcof\fP \-	run \fIrefcof\fP (1\-\s-1ESPS\s+1) with X Windows interactions and displays
\fIxfft\fP \-	run \fIfft\fP (1\-\s-1ESPS\s+1) with X Windows interactions and displays
\fIxacf\fP \-	interactive tool for making \fIacf\fP (1\-\s-1ESPS\s+1) parameter files 

\fIplot3d\fP \-	interactive 3-D plot (perspective plots with hidden lines removed)

\fIxwaves\fP \-	general interactive analysis and display program for ESPS data
\fIxspectrum\fP \-	\fIxwaves\fP+ attachment for spectrum estimation
\fIxlabel\fP \-	\fIxwaves\fP+ attachment for time-series labelling
\fIsend_xwaves\fP \-	open a connection to an xwaves+ server socket and send commands

\fIaplot\fP \-	non-interactive plot of ASCII data
\fIplotsd\fP \-	non-interactive plot of sampled data
\fIxmcd\fP \-	non-interactive plot of any data in Unix GPS format
\fIgenplot\fP \-	non-interactive plot of ESPS data in multiline format
\fImlplot\fP \-	non-interactive plot of sampled-data in multiline format
\fIplotspec\fP \-	non-interactive plot of ESPS spectral data (FEA_SPEC record(s))
\fIscatplot\fP \-	non-interactive scatter plot of ESPS FEA data
\fIplotsgram\fP \-	non-interactive plot of FEA_SPEC data as spectrogram
\fIimage\fP \-	non-interactive plot of ESPS FEA data as an image

\fIwsystem\fP \-	return the type of window system being run
.fi
.sh 2 "ESPS Library Functions"
.lp
Here is a list of the user-level programs relevant to XIG.  For more
information about each of them, see the ESPS reference manual or use
\fIeman\fP (1\-\s-1ESPS\s+1) to view the on-line man pages.
.nf
.ta 2i

\fIexv_get_help\fP \-	create XView frame containing text of man page or help file
\fIexv_make_text_window\fP \-	create XView frame containing text of ASCII file
\fIexv_helpfile\fP \-	return file name containing cleaned man page or plain text
\fIexv_attach_icon\fP \-	attach one of the standard ESPS icons to a frame.  

\fIexv_prompt_params\fP \-	create interactive window for ESPS parameter file 

\fIexv_bbox\fP \-	create panel with arbitrary screen buttons
\fIread_olwm_menu\fP \-	reads a menu in Open Look Window Manager format; 
\fIprint_olwm_menu\fP \-	prints an \fIolwm\fP-format menu; 

\fIopen_xwaves\fP \-	open a socket connection to an \fIxwaves\fP+ server
\fIsend_xwaves\fP \-	send a command to an \fIxwaves\fP+ server
\fIclose_xwaves\fP \-	close a socket connection to an \fIxwaves\fP+ server
\fIsend_xwaves2\fP \-	send command to an \fIxwaves\fP+ server without separate 
	     open and close
.fi
.sh 2 "\fIxwaves\fP+ Globals"
.lp
The initial state of \fIxwaves\fP+ is determined by the globals in the
".wave_pro" file that is read on startup.  Included in the effects of
the globals are:
.ip "\ \ \ \(bu"
initial \fIxwaves\fP+ control window position (and iconization state)
.ip "\ \ \ \(bu"
default position and size of first \fIxwaves\fP+ data display window
and default relative positions of subsequent windows
.ip "\ \ \ \(bu"
heights for scrollbar and digital readout panels
.ip "\ \ \ \(bu"
whether or not to display the spectrogram reticle
.ip "\ \ \ \(bu"
whether or not to display field labels and digital readouts
.ip "\ \ \ \(bu"
ganging control for scrolling and zooming
.ip "\ \ \ \(bu"
controls for spectrogram (image) interpolation and rescaling
.ip "\ \ \ \(bu"
initial semantics for left and middle mouse buttons
.ip "\ \ \ \(bu"
initial colormap
.ip "\ \ \ \(bu"
parameters for digital halftone algorithms (monochrome displays)
.ip "\ \ \ \(bu"
crude controls for plotting scales
.ip "\ \ \ \(bu"
initial position of \fIxspectrum\fP and \fIxlabel\fP control windows
.ip "\ \ \ \(bu"
initial position and size of xspectrum data (plot) window
.lp
For details on these and other globals, see the the heavily-commented
default ".wave_pro" ($ESPS_BASE/lib/waves/.wave_pro).  Note that this
file can be viewed by means of \fIeinfo\fP (1\-\s-1ESPS\s+1).
.lp
Two globals deserve special mention.  One is \fIinit_file\fP \- this
is the name of a command file to be executed on startup.
Execution takes place after all the other variable initializations in
the profile are done, regardless of where in that file the definition
of \fIinit_file\fP occurs.  The \fIinit_file\fP usually is the best
place in which to put initial \fIxwaves\fP+ commands for
reconfiguring the menu, bringing up button panels, etc.
.lp
The other global is \fIoutput_dir\fP.  If \fIoutput_dir\fP is defined,
all output files from \fIxwaves\fP+, \fIxspectrum\fP, and \fIxlabel\fP
will go into this directory (including edited files, saved file
segments, spectrogram output files, outputs from add_espsf, etc.).  If
\fIoutput_dir\fP is not defined, outputs go in the same directory as
the corresponding input.  This global is important for multi-user
applications in which a set of standard, read-only, input files are
used by everyone.
.sh 2 "\fIxwaves\fP+ Commands"
.lp
Since \fIxwaves\fP+ is primarily a display program, a large number of
the \fIxwaves\fP+ commands are relevant to the customization of
user-interfaces.  Here, we mention some particularly relevant commands
\- those that bring up new display windows, that reconfigure the
waveform and spectrogram menus, and that create arbitrary screen
buttons that can be used to invoke \fIxwaves\fP+ commands or command
files.  For details about these and other commands, see the 
\fIxwaves\fP+ manual.  
.nf
.ta 1.5i

\fIadd_espsf\fP \-	add external ESPS (file output) call to menu
\fIadd_espst\fP \-	add external ESPS (text output) call to menu
\fIadd_espsn\fP \-	add external ESPS (no output) call to menu
\fIadd_waves\fP \-	add \fIxwaves\fP+ command (or command file) to menu

\fIdelete_item\fP \-	delete specific item from \fIxwaves\fP+ menu
\fIdelete_all_items\fP\-	delete all items from \fIxwaves\fP+ menu

\fImake_panel\fP \-	create auxiliary control panel with screen buttons
\fIclose_panel\fP \-	close (iconize) auxiliary control panel
\fIopen_panel\fP \-	open auxiliary control panel
\fIkill_panel\fP \-	kill auxiliary control panel

\fIclose_ctlwin\fP \-	close (iconize) main \fIxwaves\fP+ control
\fIopen_ctlwin\fP \-	open main \fIxwaves\fP+ control panel

\fImake\fP \-	create a new data display window
\fIclose\fP \-	close (iconize) a data window
\fIopen\fP \-	open a data window
\fIkill\fP \-	destroy one or more data display windows

\fIattach\fP \-	start an attachment (\fIxlabel\fP, \fIxspectrum\fP)
\fIdetach\fP \-	terminate an attachment
\fIsend\fP \-	send a message to an attachment 

\fIenable_server\fP \-	start operation as display server 
\fIdisable_server\fP \-	stop operation as display server 
.fi
.sh 2 "Environment Variables"
.lp
ESPS and \fIxwaves\fP+ programs are sensitive to a variety of
\fIunix\fP environment variables that support position 
independence and XIG customization.  For a list and discussion of 
the full set, see \fIespsenv\fP (1\-\s-1ESPS\s+1).  Here are some
particularly relevant ones: 
.ip ESPS_BASE
This should be set to the root of the ESPS (and \fIwaves\fP+) install
tree.  If not defined, programs all use /usr/esps as a default. 
.ip ESPS_TEMP_PATH
This can be set to the directory that you want programs to use for
temporary files.  Not all programs currently pay attention to
ESPS_TEMP_PATH, but over time they will be modified to do so.  The 
plot programs have been modified to support ESPS_TEMP_PATH.  
.ip ESPS_MENU_PATH
This is the path used by \fImbuttons\fP (1\-\s-1ESPS\s+1) and
\fIfbuttons\fP (1\-\s-1ESPS\s+1) to find \fIolwm\fP-format menu
files.   If ESPS_MENU_PATH is not defined, the default path used is
".:$ESPS_BASE/lib/menus".
.ip ESPS_PARAMS_PATH
This is the path used to find ESPS parameter files specified by the
standard ESPS \fB-P\fP option.  If ESPS_PARAMS_PATH is not defined,
the default path used is ".:$ESPS_BASE/lib/params".
.ip WAVES_INPUT_PATH
This is the path used by \fIwaves+\fP and \fIxwaves+\fP to find all
input signal files, label files, and label menu files.  If
WAVES_INPUT_PATH is not defined, the default path used is
".:$ESPS_BASE/lib/waves/files".
.ip WAVES_LIB_PATH
This is the path used by \fIwaves+\fP and \fIxwaves+\fP to find certain library
files.  If WAVES_LIB_PATH is not defined, the default path used is
"$ESPS_BASE/lib/waves".
.ip WAVES_MENU_PATH
This is the path used by \fIxwaves+\fP to find olwm-format menu files used
with the \fIxwaves+\fP command \fImake_panel\fP.  If WAVES_MENU_PATH is not
defined, the default path used is ".:$ESPS_BASE/lib/waves/menus".
.ip WAVES_COMMAND_PATH
This is the path used by \fIwaves\fP+ and \fIxwaves+\fP to find
command files.  If WAVES_COMMAND_PATH is not defined, the default path
used is ".:$ESPS_BASE/lib/waves/commands".
.ip WAVES_COLORMAP_PATH
This is the path used by \fIwaves+\fP and \fIxwaves+\fP to find colormaps.  If
WAVES_COLORMAP_PATH is not defined, the default path used is
".:$ESPS_BASE/lib/waves/colormaps".
.ip  WAVES_PROFILE_PATH
This is the path used by \fIwaves+\fP and \fIxwaves+\fP to find the startup
profile.  IF WAVES_PROFILE_PATH is not defined, the default path used
is "$HOME:$ESPS_BASE/lib/waves".
.ip WAVES_HOST
This is the hostname of an \fIxwaves+\fP display server.  That is,
\fIsend_xwaves\fP (1\-\s-1ESPS\s+1) \fIsend_xwaves\fP
(3\-\s-1ESPS\s+1) attempt to send messages to an \fIxwaves+\fP process
running on WAVES_HOST.  If WAVES_HOST is not defined, the local host
is assumed.
.ip WAVES_PORT
This is the INET domain socket port number used by \fIsend_xwaves\fP
(1\-\s-1ESPS\s+1) and \fIsend_xwaves\fP (3\-\s-1ESPS\s+1) when sending
messages to an \fIxwaves+\fP display server.  It is also used by
\fIxwaves+\fP in determining the port on which to listen.  If
WAVES_PORT is not defined, than a compiled-in default is used.  This
is the default socket that \fIxwaves+\fP listens on when started in
server mode (\fB-s\fP).  If a non-default socket is to be used, it is
specified to \fIxwaves+\fP, \fIsend_xwaves\fP (1\-\s-1ESPS\s+1), and
\fIsend_xwaves\fP (3\-\s-1ESPS\s+1) by means of WAVES_PORT.  Note that
\fIsend_xwaves\fP (1\-\s-1ESPS\s+1) and \fIxwaves+\fP also have a \fB-p\fP option that can
be used to override WAVES_PORT.
.ip  BBOX_QUIT_BUTTON
If this variable is defined, it forces a "QUIT" button to be included
at the top of every button panel created via \fIexv_bbox\fP
(3\-\s-1ESPS\s+1).  This includes button panels created by
\fImbuttons\fP (1\-\s-1ESPS\s+1), \fIfbuttons\fP (1\-\s-1ESPS\s+1),
and the \fIxwaves+\fP command \fImake_panel\fP.  The variable has no
effect if a quit button was specified directly using the \fB-q\fP
option to \fImbuttons\fP or the \fIquit_button\fP keyword of the
\fIxwaves+\fP command \fImake_panel\fP.
.ip DEF_HEADER
If defined when ESPS programs or \fIxwaves\fP+ encounters
a headerless file, DEF_HEADER specifies a default header to be used.  
Note that the value of \fIDEF_HEADER\fP relevant for \fIxwaves\fP+ is
the value in the environment when \fIxwaves\fP+ starts up.  
.sh 1 "COMBINING AND ENCAPSULATING THE XIG FEATURES"
.lp
The demos that are accessible from the panel put up by \fIedemos\fP
(1\-\s-1ESPS\s+1) all serve as examples for how to make use of the
facilities mentioned above.  They operate in a manner that encapsulates an
application and presents it to the user with an application-specific
user-interface.  
.lp
As an example for discussion here, we shall make use of the demo 
that facilitates the creation and spectrum analysis of test signals.  
This demo is located in $ESPS_BASE/newdemos/testsignal.  
.sh 2 "Directory Organization" 
.lp
The \fItestsignal\fP directory is organized as follows:
.nf

   % ls $ESPS_BASE/newdemos/testsignal

   README  bin/    files/  menus/   params/  rundemo*  wcommands/

.fi
.SM .25i
.ip \fIrundemo\fP 15
Users start up the application by invoking this script.  
.ip \fIREADME\fP 15 
This is an ASCII file containing a brief overview of the application.  
.ip \fIbin\fP 15
This is a directory containing executable programs and scripts
needed by the application.  
.ip  \fIfiles\fP 15
This is a directory containing input files needed in the 
application, including the \fIxwaves\fP+ startup profile.  
.ip \fImenus\fP 15
This is a directory containing (\fIolwm\fP-format) menu 
files needed in the application.  Such files are used by
the programs \fIfbuttons\fP and \fImbuttons\fP, and also by the 
\fIxwaves\fP+ command \fImake_panel\fP.  
.ip \fIparams\fP 15
This is a directory containing ESPS parameter files needed in the 
application. 
.ip \fIwcommands\fP 15
This is a directory containing \fIxwaves\fP+ command files needed in 
the application. 
.RM
.sh 2 "How it Works"
.lp
As mentioned above, users start the application by running the script
\fIrundemo\fP.  (In the case of \fItestsignal\fP, this is often done
indirectly via a button on a demo panel.)  To understand how it works,
it is helpful to run the demo now.  Click on "\fISee Demo Scripts and
Files\fP", which brings up another panel, and then click on "rundemo
(startup script)" in the new panel.  You can then track the following
description of \fIrundemo\fP's actions (when appropriate, click on
additional buttons to see other files):
.np
Creates or checks a directory that will be used for output files, and
exports an environment variable with the full path to that directory.
\fITestsignal\fP is an example of a multi-user application that uses a
set of standard, read-only, input files for everyone, but that also
needs to write output files that are user-specific.  To handle this
\fIrundemo\fP takes a single argument: the path of a writable
directory that can be used for output files.  If the argument is
missing, \fIrundemo\fP sets it to a unique subdirectory of /usr/tmp.
.np
Sets and exports environment variables for various ESPS and
\fIxwaves\fP+ paths.  Most of these cause the application to 
get menus, parameter file, command files, and executables from the 
subdirectories below \fIrundemo\fP.  
.np
Creates a unique \fIxwaves\fP+ server port number and exports it 
via WAVES_PORT.  
.np
Runs \fIbin/guess_audio\fP to try and set up output D/A according to what
is available.
.np
Modifies a standard \fIxwaves\fP+ profile (\fIfiles/waves_pro\fP) to
set \fIoutput_dir\fP to the output directory determined by (1), above.
(The resulting profile is written to that directory.)
.np
Starts \fIxwaves\fP+ in server mode, using the \fIxwaves\fP+ profile
created by (5).  The \fIinit_file\fP global is set so that the command
file \fIwcommands/demoinit.WC\fP is run when \fIxwaves\fP+ starts up.
This command file does the following:
.SM .5i
.ip \ \ \(bu
reconfigures the \fIxwaves\fP+ menu;
.ip \ \ \(bu
starts the attachment \fIxspectrum\fP;
.ip \ \ \(bu
brings up two \fIxwaves\fP+ control panels, one for mouse bindings
and one for miscellaneous controls. 
.ip \ \ \(bu
sets \fIxspectrum\fP to display using harmonic cursors and to compute
using the fast modified Burg method; 
.ip \ \ \(bu
puts up an initial test signal (\fIfiles/sample.sd\fP)
.ip \ \ \(bu
computes an initial spectrum;
.ip \ \ \(bu
puts up the text of the README file describing the application
.RM
.ip
Note that \fIxwaves\fP+ is started up in the background, so that the
\fIrundemo\fP script proceeds.
.np
Puts up an application control panel using \fImbuttons\fP
(1\-\s-1ESPS\s+1) running on the menu file \fItsignal.BM\fP.  (Other
applications use \fIfbuttons\fP (1\-\s-1ESPS\s+1); see the
\fItimitdemo\fP, for example.)  The menu file \fItsignal.BM\fP yields 
the following buttons: 
.SM .5i
.ip \fIQUIT\fP
exits \fImbuttons\fP (and the application)
.ip \fIREADME\fP
puts up the README file (again) 
.ip "\fISetup Audio Output\fP"
this is a button menu with selections for different output options
.ip "\fIGenerate New Test Signal\fP"
this invokes the script \fIbin/newsignal\fP, which kills the current
signal displays, uses \fIexprompt\fP (1\-\s-1ESPS\s+1) to prompt the
user for new signal and noise parameters, computes the new signal plus
noise, displays the signal, and computes an initial spectrum;
.ip "\fIsee Demo Scripts and Files\fP"
this brings up another panel with a button to display each of the 
files in the application; this is appropriate for a demo, but 
usually not for a turn-key application;
.RM
.ip
As an example of the simplicity of the configuration files used
by \fImbuttons\fP, \fIfbuttons\fP, and the \fIxwaves\fP+ command
\fImake_panel\fP, here is the text of the file that creates the 
buttons described above (\fImenu/tsignal.BM\fP):
.nf
.ta 3.2i

  README	xtext -Wp 555 400 -F README	

  "Setup Audio Output" MENU

    "Setup SPARCStation Output"	rm -f bin/play; \\
	ln -s `get_esps_base`/bin/splay bin/play

    "Setup Ariel S32C Output"	rm -f bin/play; \\
	ln -s `get_esps_base`/bin/s32cplay bin/play

    "Setup AT&T FAB2 Output"	rm -f bin/play; \\
	ln -s `get_esps_base`/bin/wplay bin/play

    "Setup no output"	rm -f bin/play; \\
	ln -s `pwd`/bin/null_play bin/play

  "Setup Audio Output" END

  "Generate New Test Signal"	newsignal

  "See Demo Scripts and Files"	mbuttons -q 1 -X0 -Y 350 \\
	-w"Demo Configuration Files" -i"demo" \\
	-b1 demofiles.BM

.fi
.ip
Note that \fImbuttons\fP is run in the foreground, so that
\fIrundemo\fP does not proceed until \fImbuttons\fP terminates.  The
idea here is an exit from \fImbuttons\fP (when the user clicks on
QUIT) signifies termination of the application.  (Of course, this
behavior may differ from application to application.)
.np
After \fImbuttons\fP terminates, \fIsend_xwaves\fP (1\-\s-1ESPS\s+1)
instructs \fIxwaves\fP+ to run a termination command file
(\fIdemoquit.WC\fP) that detaches \fIxspectrum\fP and quits
\fIxwaves\fP+.  
.np
Removes various temporary files in the output directory.  (Other 
applications might leave these in place.)  
.sh 2 "Organizing the Sources"  
.lp
Rather than keeping the sources for such an encapsulated application 
in a set of directories that mirror the structure of the installed 
application (e.g., as described above), it is better to 
keep them in a flat directory with a Makefile that creates the 
various subdirectories and installs into them.  
.lp
To show how this is done, we have included the sources for the
installed \fItestsignal\fP demo.  You can find them in
$ESPS_BASE/src_examples/xig/testsignal.  Notice that all of the ASCII
files (which we control using SCCS) are at the same (flat) level, and 
that all of the binary files (in this case only one (binary_files/).  

(end)




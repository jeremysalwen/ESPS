







                         ENTROPIC RESEARCH LABORATORY, INC.





          ESPS APPLICATIONS NOTE: File Headers and Record Keeping in ESPS



                                    John Shore


                         Entropic Research Laboratory, Inc.
                        600 Pennsylvania Ave. SE, Suite 202
                               Washington, D.C. 20003
                                   (202) 547-1420




       1 .  INTRODUCTION


            The Entropic Signal Processing  System  (ESPS)  contains  record-
       keeping  mechanisms that result in ESPS file headers containing a com-
       plete history of the origin of the data in the file and of all  inter-
       mediate  processing  steps.   This  Applications  Note  explains  ESPS
       record-keeping in terms of two spectrum analysis examples.  For a gen-
       eral introduction to ESPS, see. [1]


       1 .1 .  User Level Programs

            ESPS includes the following  user  level  programs  that  support
       record keeping:

       comment (1-ESPS)- displays comments from or adds them to ESPS file headers
       psps (1-ESPS)  - print header and record information from an ESPS file
       hd_shrink (1-ESPS)- remove recursive headers from an ESPS file
       addgen (1-ESPS)- adds a generic header item to an existing or new ESPS file header

       The use of these programs is described in this Applications Note.




       ____________________
          c Copyright 1988,1989,1990 Entropic Speech,  Inc.;  Copyright  1993
       Entropic Research Lab, Inc.; All rights reserved.












       RECORD KEEPING IN ESPS                                          page 2


       1 .2 .  Library Functions

            ESPS programs implement record keeping using calls to the follow-
       ing ESPS library functions:

       add_source_file (3-ESPS)- add source file name and header to ESPS header
       add_comment (3-ESPS)- append a string to comment field of an ESPS file header

       These functions are not discussed further  in  this  document.   Users
       should  refer  to  the relevant Section 3 manual pages and to the ESPS
       programming guidelines. [2]












































       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                          page 3


           Figure 1: Portions of four SD files generated by demo script.


       2 .  EXAMPLE SCRIPTS

       ESPS record keeping will be illustrated in this Applications  Note  in
       terms  of  two  demonstration  scripts.   Both do essentially the same
       things, but one relies heavily on UNIX pipes.  The first script,  usu-
       ally  located in /usr/esps/demo/specdemo, adds two sine waves to Gaus-
       sian noise, computes reflection  coefficients,  and  then  computes  a
       power  spectrum.   Here  is  a  summary of the processing (this is the
       actual output seen when the demo script is run):

           make 1 second of Gaussian noise
              %testsd -r20000 -Tgauss gauss.sd
           make 1 second of a sine wave at frequency 600 Hz and one at 1100 Hz
              %testsd -Tsine -f600 -r20000 sine1.sd
              %testsd -Tsine -f1100 -r20000 sine2.sd
           add the two sine waves
              %addsd sine1.sd sine2.sd sines.sd
           add the Gaussian noise to the sines
              %addsd gauss.sd sines.sd signal.sd
           compute reflection coefficients to 100th order
              %refcof -o100 -r1:2500 -l0 signal.sd signal.rc
           compute spectrum
              %me_spec signal.rc signal.spec

       Figure 1 shows portions of the two sine  waves  (sine1.sd,  sine2.sd),
       the  sum  of  the  two  sine waves (sines.sd), and the sum of the sine
       waves plus noise (signal.sd).  The plot  was  generated  using  mlplot
       (1-ESPS).  | Note that mlplot (1-ESPS)  can  also  plot  sampled  data
       files in "vertical" format, so that the actual data is apparent.  This
       is shown in Fig. 2.

             Figure 2: Portions of four SD files in "vertical" format.


       Figure 3 shows the power spectrum of the signal shown in the last line
       of  Fig.  1  (signal.sd).   This  spectrum  is  contained  in the file
       signal.spec.



                 Figure 3: Power spectrum generated by demo script.


       ____________________

          | The plots were included in this Applications Note  by  generating
       MASSCOMP  gps  output  from  the ESPS plotting programs and then using
       gpstt (1) to convert the results to device-independent troff.




       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                          page 4


       The second example script, usually located in /usr/esps/demo/pipedemo,
       does  the  same thing as the specdemo script, but it uses pipes.  Here
       is a summary of the processing (note that the last command  ties  four
       ESPS commands together with pipes):

           make 1 second of a sine wave at frequency 600 Hz
              %testsd -Tsine -r20000 -f600 psine1.sd

           make 1 second of a sine wave at frequency 1100 Hz and add to other one
              %testsd -Tsine -f1100 -r20000 - | addsd - psine1.sd  psines.sd

           make 1 second of Gaussian noise, then add it to the two sines;
           then compute reflection coefficients to 100th order ;
           and then compute the spectrum
              %testsd -Tgauss -r20000 - | addsd - psines.sd -
                            | refcof -o100 -r1:2500 -l0 - - | me_spec - psignal.spec


       3 .  OVERVIEW OF RECORD KEEPING

            ESPS files have a common  structure  consisting  of  a  variable-
       length  header  followed  by data records.  Within a single ESPS file,
       the records have a fixed-length that depends  on  information  in  the
       header.   Record-lengths  vary,  however, even among files of the same
       basic type.

            The ESPS header is the primary means by which  record-keeping  is
       performed  within  ESPS.  The header of an ESPS file contains standard
       "bookkeeping" information, a copy of the command line used to generate
       the file, informal ASCII comments, and values of all important parame-
       ters to the program that created the ESPS file.  When an ESPS  program
       produces  an output ESPS file, the output header includes the names of
       any source files as well the headers of  these  source  files.   Since
       ESPS headers are recursive structures, these source file headers them-
       selves contain the names and headers of files that were their sources.
       Thus, ESPS file headers contain the headers of all source files in the
       processing chain.  It follows that most ESPS files contain a  complete
       history of the origin of the data in the file and all the intermediate
       processing steps.

            As an example of this, Figure 4 shows a diagram of  the  complete
       ESPS  header for signal.spec, the file produced by the program me_spec
       at the end of the specdemo script.  Each box represents the basic ESPS
       header  of the file named in the box, i.e., the contents of the header
       except for the names and headers of source files.  Thus the top box in
       Fig.   4  is  the  basic  header  of  signal.spec.  The full header of
       signal.spec includes the header of the input file signal.rc, which  is
       indicated  in  Fig.   4  by  the arrow pointing to the basic header of
       signal.rc.  The header of signal.rc in turn  includes  the  header  of
       signal.sd  (the  input  file  to  refcof,  the  program  that produced
       signal.rc), and so on.




       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                          page 5


		FIGURE NOT REPRODUCED IN ON-LINE VERSION


        Figure 4: Embedded source file headers in the header of signal.spec.


            The information in ESPS headers is  available  to  programs  that
       process  ESPS files, so that the behavior of these programs can depend
       on the such information.  Here, however, we  are  concerned  with  the
       value of this information to the human user.

            The ASCII comment field in an ESPS file can be viewed using  com-
       ment  (1-ESPS),  which also provides options for adding arbitrary text
       to the comment field and for viewing recursively the comments  in  all
       of  the  embedded  headers.   Full file headers (and data records) are
       viewed in ASCII form by means of  the  program  psps  (1-ESPS),  which
       includes  options for viewing recursively all of the embedded headers.
       The output from psps identifies values from  header  and  data-records
       fields  by  name.  Within programs, the fields are also referred to by
       name.

       4 .  ESPS COMMENTS

            As I have already mentioned, one of the fields in the header is a
       variable-length  field  containing  ASCII  comments that can be viewed
       using comment (ESPS).  By convention, ESPS programs put their  command
       line  (as  typed  by the user) into the comment field of output files.
       For example, the comment field in the first  sine-wave  SD  file  from
       specdemo can be output as follows:

           %comment sine1.sd
           testsd -Tsine -f600 -r20000 sine1.sd

       Some programs  (e.g.,  addsd  (1-ESPS))  put  in  additional  comments
       besides  the command line.  For example, the comment field in the file
       produced by adding the two sine waves sine1.sd and sine2.sd is  output
       as follows:


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                          page 6


           %comment sines.sd
           addsd sine1.sd sine2.sd sines.sd
             Added samples from sine2.sd to samples 1 - 8000 of sine1.sd.

       In the case of addsd, the extra comment is included because the  range
       of  points might not be stated on the command line (it could come from
       an ESPS Parameter file or Common file, for example; see[1,3).

            A quick summary of the  processing  history  of  a  file  can  be
       obtained  by  looking  at  all  the comment fields of a header and all
       embedded headers.  This follows because the combined  fields  contain,
       not  only  the command line of the program that produced the file, but
       the command lines of all of the predecessor programs.  This capability
       is provided by running comment with the -a option.  Here is the result
       for signal.spec, the final file produced by specdemo.

           %comment -a signal.spec
           me_spec signal.rc signal.spec
            refcof -o100 -p1:2500 -l0 signal.sd signal.rc
             addsd gauss.sd sines.sd signal.sd
               Added samples from sines.sd to samples 1 - 8000 of gauss.sd.
              testsd -r20000 -Tgauss gauss.sd
              addsd sine1.sd sine2.sd sines.sd
                Added samples from sine2.sd to samples 1 - 8000 of sine1.sd.
               testsd -Tsine -f600 -r20000 sine1.sd
               testsd -Tsine -f1100 -r20000 sine2.sd


       The indentation of the output increases with each level  of  recursion
       (i.e.,  with  each horizontal layer in Fig.  4).  If any given file in
       the processing chain was written by a program that had more  than  one
       input  file,  the  comments  from the input files come out at the same
       indentation level.

       4 .1 .  The Comment Field and Pipes

            Because most ESPS programs are designed to work  on  UNIX  pipes,
       the  history mechanism was also designed so that it does not depend on
       the existence of intermediate disk files.  For example, here  are  the
       comments from the final output file produced by pipedemo:

           %comment -a psignal.spec
           me_spec - psignal.spec
            refcof -o100 -p1:2500 -l0 - -
             addsd - psines.sd -
               Added samples from psines.sd to samples 1 - 2147483647 of <stdin>.
              testsd -Tgauss -r20000 -
              addsd - psine1.sd psines.sd
                Added samples from psine1.sd to samples 1 - 2147483647 of <stdin>.
               testsd -Tsine -f1100 -r20000 -
               testsd -Tsine -r20000 -f600 psine1.sd

       Since an input to addsd came from a pipe, the program could  not  tell


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                          page 7


       how many samples were coming (for disk files, it can) - hence the huge
       number, which happens to be the largest possible value of a long.

       4 .2 .  Adding Informal Comments to the Comment Field

            Users can add their own informal comments to ESPS files by  using
       comment  with  the  -c  (command-line  comment)  or  -C (comment file)
       options.  If "-" is specified for a comment file, the user is prompted
       to give a comment on standard input.  All user-added comments are pre-
       ceded by a date stamp.  Here's an example:

           %comment -C - signal.spec
           comment: enter comment, end with blank line
           This file was produced by a demo script; it contains the
           power spectrum of two sine waves plus Gaussian noise.

           %comment signal.spec
           me_spec signal.rc signal.spec
           comment added: Fri Oct 23 10:28:53 1987
           This file was produced by a demo script; it contains the
           power spectrum of two sine waves plus Gaussian noise.

           %comment -a signal.spec
           me_spec signal.rc signal.spec
           comment added: Fri Oct 23 10:28:53 1987
           This file was produced by a demo script; it contains the
           power spectrum of two sine waves plus Gaussian noise.
            refcof -o100 -p1:2500 -l0 signal.sd signal.rc
             addsd gauss.sd sines.sd signal.sd
               Added samples from sines.sd to samples 1 - 8000 of gauss.sd.
              testsd -r20000 -Tgauss gauss.sd
              addsd sine1.sd sine2.sd sines.sd
                Added samples from sine2.sd to samples 1 - 8000 of sine1.sd.
               testsd -Tsine -f600 -r20000 sine1.sd
               testsd -Tsine -f1100 -r20000 sine2.sd

       Like other comments, user-added comments are propagated  by  the  ESPS
       record-keeping  mechanism - thus, they appear in the comment fields of
       subsequent files.

       5 .  DETAILED RECORD KEEPING IN ESPS FILE HEADERS

            ESPS file headers comprise three parts:  the  universal  section,
       the type-specific section, and generic header items.  When headers are
       viewed with psps, all header items are identified by name.  The header
       items  are  also referred to by these same names within ESPS programs,
       which makes it easier to write, read, and maintain programs.

       5 .1 .1 .  The Universal Section of the Header

            As the name implies, the universal section of the ESPS header has
       the  same  definition for all ESPS file types.  The comment field dis-
       cussed above is part of the universal  section,  which  also  contains


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                          page 8


       information  about  the  type  of  data  in the file, the program that
       created the file, the user who created  the  file,  the  input  source
       files, etc.

            When psps is called without any options, it outputs the universal
       section  of  the  header  followed  by  all  of the data records.  The
       universal header alone, can be viewed with the -D  (no  data)  option,
       and  the  universal header plus a restricted range of data records can
       be viewed with the -r (range)  option.   Here,  for  example,  is  the
       universal header and first 15 data records of a sampled data file from
       specdemo:

           %psps -r1:15 sines.sd
           File: sines.sd

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Tue Mar 20 14:37:01 1990 , header version: 1.73
           Produced by: addsd, version: 3.12, of: 2/19/90, user: burton
           Hostname:path: epiwrl:/u2/burton/esps/doc
           Machine type: Masscomp; file is in NATIVE format.
           Number of data records: 8000
           Data is not tagged.
           comment text:
            addsd sine1.sd sine2.sd sines.sd
              Added samples from sine2.sd to samples 1 - 8000 of sine1.sd.
           Source files: sine1.sd
                         sine2.sd
           There is no reference header.

                1:      0.0000   263.0596   502.7742   698.2844   833.4172
                6:    898.3527   890.5669   814.9475   683.0757   511.7628
               11:    321.0198   131.6999   -36.9073  -169.2464  -255.1805

       The meaning of most of the header items is obvious; for the others see
       ESPS (5-ESPS) in Section 5 of the User's Manual.

       5 .2 .  Type-Specific Section of the Header

            As the name implies, this section of the header is used to record
       information relevant to the specific file type.  The items defined for
       a particular built-in file type are described in the manual  page  for
       that  file  type in Section 5 of the ESPS Manual.  For example, see SD
       (5-ESPS) for the  type-specific  header  definition  for  sampled-data
       files.  For FEA files and FEA subtypes, the type-specific section con-
       tains the self-description information - the names, types,  and  sizes
       of the record fields defined in the file.

            The output from psps will include the  type-specific  header  (in
       addition  to  the  universal  header) if the -l (for "long") option is
       used.  For example, here is the header for the  file  signal.sd  (pro-
       duced as part of specdemo:
            %psps -l signal.sd


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                          page 9


            File: signal.sd

            ---Universal Part of Header---
            File type: FEA (Feature File)
            File header date: Tue Mar 20 14:37:06 1990 , header version: 1.73
            Produced by: addsd, version: 3.12, of: 2/19/90, user: burton
            Hostname:path: epiwrl:/u2/burton/esps/doc
            Machine type: Masscomp; file is in NATIVE format.
            Number of data records: 8000
            Data is not tagged.
            comment text:
             addsd gauss.sd sines.sd signal.sd
               Added samples from sines.sd to samples 1 - 8000 of gauss.sd.
            Source files: gauss.sd
                          sines.sd
            There is no reference header.

            ---Type Specific Part of Header (FEA)---
            fea_type: FEA_SD, segment_labeled: NO, field_count: 1

            ---Generic Part of Header---
            record_freq:  20000
            start_time:  0

       The generic part of the header  is  explained  in  the  next  section.
       Notice  that non-numeric quantities are printed symbolically (e.g., NO
       instead of something like "type 0").

            For FEA files, the -l option on psps shows the  FEA  subtype  (if
       any),  whether  or not the file is segment labelled, and the number of
       fields.  Here is an example using the FEA_SPEC file  signal.spec  from
       specdemo:

           %psps -l signal.spec
           File: signal.spec

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Fri Jan  6 11:11:22 1989 , header version: 1.66
           Produced by: me_spec, version: 1.4, of: 12/13/88, user: shore
           Hostname:path: epiwrl:/u2/shore/epi/esps/doc/demo
           Number of data records: 1
           Data is  tagged.
           refer file: signal.sd
           comment text:
           me_spec signal.rc signal.spec
           Source files: signal.rc
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_SPEC, segment_labeled: NO, field_count: 3

           ---Generic Part of Header---


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 10


           contin:  YES
           frame_meth:  FIXED
           freq_format:  SYM_EDGE
           frmlen:  2500
           num_freqs:  513
           order_unvcd:  100
           order_vcd:  0
           record_freq:  8
           sf:  20000
           spec_type:  DB
           src_sf:  20000
           start:  1
           start_time:

       The generic part of the header  is  explained  in  the  next  section.
       Notice,  however, that non-numeric quantities are printed symbolically
       (e.g., SYM_EDGE instead of something like "type 3").  Again, the mean-
       ings  of these items are described in the relevant Section 5 man page,
       in this case FEA_SPEC (5-ESPS).

            If detailed information is needed about the field definitions for
       FEA  files,  the  -v  should  be used on psps.  This expands the type-
       specific portion of the FEA header to show the names, types, and sizes
       of the defined fields.  For CODED fields, the possible symbolic values
       are shown.  The -v also gives the same details for the generic  header
       items.

           %psps -v signal.spec
           File: signal.spec

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Fri Jan  6 11:11:22 1989 , header version: 1.66
           Produced by: me_spec, version: 1.4, of: 12/13/88, user: shore
           Hostname:path: epiwrl:/u2/shore/epi/esps/doc/demo
           Number of data records: 1
           Data is  tagged.
           Data format is 0 doubles, 514 floats, 0 longs,
           1 shorts, and 0 chars (bytes).
           refer file: signal.sd
           comment text:
           me_spec signal.rc signal.spec
           Source files: signal.rc
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_SPEC, segment_labeled: NO, field_count: 3
           Item name: tot_power, type: FLOAT, size: 1
           Item name: re_spec_val, type: FLOAT, size: 513, rank: 1
           Item name: voiced, type: CODED, size: 1
           Possible coded values:
           NO
           YES


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 11


           ---Generic Part of Header---
           contin: (CODED) YES
           Possible coded values:
           NO
           YES
           frame_meth: (CODED) FIXED
           Possible coded values:
           NONE
           FIXED
           VARIABLE
           freq_format: (CODED) SYM_EDGE
           Possible coded values:
           NONE
           SYM_CTR
           SYM_EDGE
           ASYM_CTR
           ASYM_EDGE
           ARB_VAR
           ARB_FIXED
           frmlen: (LONG) 2500
           num_freqs: (LONG) 513
           order_unvcd: (LONG) 100
           order_vcd: (LONG) 0
           record_freq: (DOUBLE) 8
           sf: (FLOAT) 20000
           spec_type: (CODED) DB
           Possible coded values:
           NONE
           PWR
           DB
           REAL
           CPLX
           src_sf: (DOUBLE) 20000
           start: (LONG) 1
           start_time: (DOUBLE) 0.0625


       5 .3 .  Generic Header Items

            The pre-defined items in the universal and  type-specific  header
       sections  are intended to be useful in a broad range of typical appli-
       cations.  However, they cannot anticipate every application,  so  ESPS
       provides  a  mechanism  by  which programs can store additional, arbi-
       trarily named items in any  ESPS  header;  these  are  called  generic
       header  items.   Like other header items, the values in generic header
       items are available (by name) to programs that process the files.

            For example, testsd can produce several types  of  test  sampled-
       data (sine waves, noise, or pulses), and it is useful to record in the
       output header which of these was chosen.  Since  the  standard  FEA_SD
       type-specific  header has no provision for this (which would be silly,
       as the list of possibly useful items  would  be  endless),  a  generic
       header-item is used.


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 12


            Generic header items are output by psps when  the  -l  option  is
       used.   (Thus,  this  option  yields  the  universal header, the type-
       specific header, and the generics.)  Here, for example,  is  the  com-
       plete header of sine1.sd (from specdemo):

           %psps -Dl sine1.sd
           File: sine1.sd

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Tue Mar 20 14:36:48 1990 , header version: 1.71
           Produced by: testsd, version: 3.12, of: 10/17/89, user: burton
           Hostname:path: epiwrl:/u2/burton/esps/doc
           Machine type: Masscomp; file is in NATIVE format.
           Number of data records: 8000
           Data is not tagged.
           comment text:
            testsd -Tsine -f600 -r20000 sine1.sd
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_SD, segment_labeled: NO, field_count: 1

           ---Generic Part of Header---
           frequency:  600
           level:  500
           max_value:  500
           phase:  0
           record_freq:  20000
           start_time:  0
           test_type:  SINE

       Although in this case the type of test signal can be deduced from  the
       command  line  in  the comment field, it is not always so obvious (the
       default might be used).  Besides, a program  that  processes  sine1.sd
       can  obtain  the  test  type by means of a simple library call, rather
       than having to do elaborate string processing on the comment field.

       5 .3 .1 .  Adding Generic Header Items at the User Level

            The program addgen (1-ESPS) allows users to add  to  add  generic
       header  items  to existing ESPS files (analogous to the use of comment
       in adding to the comment field).  This can be useful as an alternative
       form  of  informal  record record keeping, and as a means of inserting
       values that may not be present but are needed by other  programs  that
       are  to  be  run  subsequently  on the file.  For example, suppose one
       wants to insert a header item in the file signal.sd to record the sig-
       nal  to  noise  ratio  (which is 1.0).  Here's the appropriate call to
       addgen:

           %addgen -g sn_ratio -v float -v 1.0 signal.sd




       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 13


       An alternative is to use the eparam (1-ESPS) to provide an interactive
       interface:

           %eparam addgen signal.sd
           Name of new generic header item [item1]: sn_ratio
           Type of new generic header item [long]: float
           Value of new generic header item [1000.000000]: 1.0


       Here, each of the three lines following the eparam call has  a  prompt
       (with  default)  output  by eparam with the the user's input following
       the colon.  After adding a generic header item in this way, it will be
       reflected in subsequent psps listings:

           %psps -Dl signal.sd
           File: signal.sd

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Tue Mar 20 14:37:06 1990 , header version: 1.73
           Produced by: addsd, version: 3.12, of: 2/19/90, user: burton
           Hostname:path: epiwrl:/u2/burton/esps/doc
           Machine type: Masscomp; file is in NATIVE format.
           Number of data records: 8000
           Data is not tagged.
           comment text:
            addsd gauss.sd sines.sd signal.sd
              Added samples from sines.sd to samples 1 - 8000 of gauss.sd.
            added generic "sn_ratio" on Tue Mar 20 14:58:46 1990
           Source files: gauss.sd
                         sines.sd
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_SD, segment_labeled: NO, field_count: 1

           ---Generic Part of Header---
           record_freq:  20000
           sn_ratio:  1
           start_time:  0


       Besides floats, addgen supports double precision, long integer,  short
       integer,  and  string header items.  It also supports two special data
       types that link the header to ESPS  headers  and  ASCII  files  stored
       separates.  We discuss these next.

       5 .3 .2 .  External Headers and Files

            It is sometimes convenient to associate a parameter set  with  an
       ESPS file without storing the parameters within the header.  For exam-
       ple, a large database of speech files  could  have  a  common  set  of
       parameters  that  document  aspects  of the data collection.  While it


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 14


       would be wasteful to store this information in every file, it's impor-
       tant  that it be readily available not only for visual inspection, but
       also for access by programs.  ESPS meets this need with generic header
       items  of type EFILE.  Psps has a special option (-e), which causes it
       to follow EFILE references  and  to  display  the  corresponding  ESPS
       headers.   This  will  work even if the file is located on a different
       machine.

       For example, suppose there is a header-only ESPS file on  host  episun
       containing a few common parameters:

           %rsh episun psps -l /usr/u/shore/com_params

           File: com_params

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Wed Aug 10 17:38:33 1988 , header version: 1.61
           Produced by: addgen, version: 3.2, of: 9/9/88, user: shore
           Hostname:path: episun:/usr/u/shore
           Number of data records: 0
           Data is not tagged.
           comment text:
           added generic "background" on Wed Aug 10 17:37:23 1988
           added generic "microphone" on Wed Aug 10 17:38:11 1988
           added generic "filter_cutoff" on Wed Aug 10 17:38:33 1988
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: NONE, segment_labeled: NO, field_count: 1

           ---Generic Part of Header---
           background[0]:  office noise
           filter_cutoff:  3900
           microphone[0]:  carbon handset


       We can link this in using addgen:

           %eparam addgen speech.fana
           Name of new generic header item [item1]: collection_params
           Type of new generic header item [long]: efile
           Value     of     new     generic     header      item      [TEST]:
       sun:/usr/u/shore/com_params


       Without the -e option, psps just shows the reference file name:

           %psps -lD speech.fana
           File: speech.fana

           ---Universal Part of Header---
           File type: FEA (Feature File)


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 15


           File header date: Wed Aug 10 17:23:52 1988 , header version: 1.61
           Produced by: refcof, version: 3.6, of: 5/24/88, user: shore
           Hostname:path: epiwrl:/usr/edemos/demo
           Number of data records: 167
           Data is  tagged.
           refer file: speech.sd
           comment text:
           refcof -P/u2/esps3/lib/Prefcof speech.sd speech.nw.spec
           added generic "collection_params" on Wed Aug 10 17:23:52 1988
           Source files: speech.sd
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_ANA, segment_labeled: NO, field_count: 8

           ---Generic Part of Header---
           DC_removed:  NO
           collection_params:  sun:/usr/u/shore/com_params
           filters:  NO
           frmlen:  160
           maxlpc:  1
           maxpulses:  1
           maxraw:  1
           method:  AUTOC
           nan:  13421
           order:  12
           order_unvcd:  12
           order_vcd:  0
           spec_rep:  RC
           src_sf:  8000
           start:  1
           step:  80
           window_type:  WT_HAMMING


       However, if the -e option is used, psps follows the reference  (across
       the network if necessary) and displays the contents:

           %psps -e speech.fana
           File: speech.fana

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Wed Aug 10 17:23:52 1988 , header version: 1.61
           Produced by: refcof, version: 3.6, of: 5/24/88, user: shore
           Hostname:path: epiwrl:/usr/edemos/demo
           Number of data records: 167
           Data is  tagged.
           refer file: speech.sd
           comment text:
           refcof -P/u2/esps3/lib/Prefcof speech.sd speech.nw.spec
           added generic "collection_params" on Wed Aug 10 17:23:52 1988
           Source files: speech.sd


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 16


           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_ANA, segment_labeled: NO, field_count: 8

           ---Generic Part of Header---
           DC_removed:  NO
           collection_params:  External EFILE  File: sun:/usr/u/shore/com_params

              ---Universal Part of Header---
              File type: FEA (Feature File)
              File header date: Wed Aug 10 17:38:33 1988 , header version: 1.61
              Produced by: addgen, version: 3.2, of: 9/9/88, user: shore
              Hostname:path: sun:/usr/u/shore
              Number of data records: 0
              Data is not tagged.
              comment text:
              added generic "background" on Wed Aug 10 17:37:23 1988
              added generic "microphone" on Wed Aug 10 17:38:11 1988
              added generic "filter_cutoff" on Wed Aug 10 17:38:33 1988
              There is no reference header.

              ---Type Specific Part of Header (FEA)---
              fea_type: NONE, segment_labeled: NO, field_count: 1

              ---Generic Part of Header---
              background[0]:  office noise
              filter_cutoff:  3900
              microphone[0]:  carbon handset

           filters:  NO
           frmlen:  160
           maxlpc:  1
           maxpulses:  1
           maxraw:  1
           method:  AUTOC
           nan:  13421
           order:  12
           order_unvcd:  12
           order_vcd:  0
           spec_rep:  RC
           src_sf:  8000
           start:  1
           step:  80
           window_type:  WT_HAMMING


       If a program needs access to the data in an external header, it  is  a
       simple  matter to open that file, read in the header, and use the ESPS
       library routines to access the generics.

       For cases where it makes more sense to store external information as a
       pure  ASCII  file,  ESPS  provides another generic header type, AFILE,


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 17


       which works exactly as described above for EFILEs.

       6 .  FEA File Field Definitions

            FEA files provide user-defined file types and  therefore  contain
       relatively few built-in fields in the type-specific header. In partic-
       ular, the type-specific header contains just the number of  fields  in
       each  record, a flag signifying whether or not the records are segment
       labelled, and the identity of the FEA file sub-type.  For  FEA  files,
       most  header  information  is  contained  in generics that are defined
       depending on the FEA file sub-type. Here, for example, is the psps  -l
       output for the FEA file signal.rc.

           %psps -Dl signal.rc
           File: signal.rc

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Wed Aug 10 15:11:32 1988 , header version: 1.61
           Produced by: refcof, version: 3.6, of: 5/24/88, user: shore
           Hostname:path: epiwrl:/usr/edemos/demo
           Number of data records: 1
           Data is  tagged.
           refer file: signal.sd
           comment text:
            refcof -o100 -p1:2500 -l0 signal.sd signal.rc
           Source files: signal.sd
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_ANA, segment_labeled: NO, field_count: 8

           ---Generic Part of Header---
           DC_removed: NO
           filters: NO
           frmlen: 2500
           maxlpc: 1
           maxpulses: 1
           maxraw: 1
           method: AUTOC
           nan: 2500
           order: 100
           order_unvcd: 100
           order_vcd: 0
           spec_rep: RC
           src_sf: 20000
           start: 1


       Since FEA file headers also contain the definitions of record  fields,
       a  special option (-v) is provided to output them as part of the type-
       specific header.  Thus, here is the full header for signal.rc:



       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 18


           %psps -Dv signal.rc
           File: signal.rc

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Wed Aug 10 15:11:32 1988 , header version: 1.61
           Produced by: refcof, version: 3.6, of: 5/24/88, user: shore
           Hostname:path: epiwrl:/usr/edemos/demo
           Number of data records: 1
           Data is  tagged.
           Data format is 0 doubles, 104 floats, 2 longs,
           1 shorts, and 0 chars (bytes).
           refer file: signal.sd
           comment text:
            refcof -o100 -p1:2500 -l0 signal.sd signal.rc
           Source files: signal.sd
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_ANA, segment_labeled: NO, field_count: 8
           Item name: frame_len, type: LONG, size: 1
           Item name: num_pulses, type: LONG, size: 1
           Item name: frame_type, type: CODED, size: 1
            Possible coded values:
            NONE
            UNKNOWN
            VOICED
            UNVOICED
            SILENCE
            TRANSITION
           Item name: voiced_fraction, type: FLOAT, size: 1
           Item name: raw_power, type: FLOAT, size: 1
           Item name: lpc_power, type: FLOAT, size: 1
           Item name: p_pulse_len, type: FLOAT, size: 1
           Item name: spec_param, type: FLOAT, size: 100, rank: 1

           ---Generic Part of Header---
           DC_removed: NO
           filters: NO
           frmlen: 2500
           maxlpc: 1
           maxpulses: 1
           maxraw: 1
           method: AUTOC
           nan: 2500
           order: 100
           order_unvcd: 100
           order_vcd: 0
           spec_rep: RC
           src_sf: 20000
           start: 1




       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 19


       7 .  SOURCE FILE HEADERS - COMPLETE PROCESSING HISTORIES

            As I mentioned  earlier,  an  ESPS  program  output  file  header
       includes  the  names  of any source files as well the headers of these
       source files.  Since ESPS  headers  are  recursive  structures,  these
       source  file headers themselves contain the names and headers of files
       that were their sources.  Thus, ESPS file headers contain the  headers
       of  all  source  files in the processing chain.  This chain of headers
       can be viewed using various psps options.  If you want to see only the
       universal sections of all the embedded headers, use the -f option.  If
       you want to see all of the type-specific and generic portions, use -a.
       If  you  want  to expand any EFILE or AFILE generics, use -ae.  If FEA
       files are involved and you want to see the field definitions, then use
       -av (or -ave, to get the EFILE/AFILE expansion).  The resulting output
       can be quite long (see the Appendix for an example of psps -a output).

            ESPS headers can get quite large if long  processing  chains  are
       used.  If file space is short or the history is uninteresting, you can
       use hd_shrink (1-ESPS) to remove all of the embedded headers.

       8 .  Other psps Options

            Psps has some other useful options  besides  the  ones  discussed
       above.  For completeness, we summarize the psps options here:

            -a
            Print headers recursively for  all  source  files.   Headers  are
            printed  in  long  format with both common and type specific por-
            tions of each header. (i.e., as for -l option).  FEA  file  field
            definitions will be printed if -v option is also used.

            -D
            Suppress printing of data records.

            -g
            Print data records in a generic format, independent of file type.

            -h
            Recursively prints the common part of all  source  file  headers.
            If the full headers are wanted, use the -a option.

            -H
            Suppress printing of headers.

            -l
            Print the type-specific portion of the header  and  also  generic
            header items.  This does not apply to embedded headers.  If simi-
            lar behavior is wanted for embedded headers, use -a.   For  EFILE
            (external  ESPS  file)  and  AFILE  (external ASCII file) generic
            header items, just the filename is printed (full path with possi-
            ble  leading  hostname).   If you want to follow the pointer, use
            -e.



       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 20


            -e
            Follow references to external files.  If any generic header items
            are  of  type EFILE (external ESPS file), the header of that file
            is printed.  If any of the generic header items are of type AFILE
            (external  ASCII  file),  the  contents of that file are printed.
            This option implies -l (i.e., if you give -e, you don't  need  to
            give  -l).   This  option  does not apply to embedded source file
            headers.  If similar behavior is wanted for embedded headers, use
            -a.   For  EFILE  and  AFILE items that refer to a file on a dif-
            ferent host (the hostname followed by a colon precedes  the  full
            path of the file), psps will copy the file header from the remote
            host and print it.  Depending on network configuration, this  can
            cause psps to run slowly.

            -v
            Verbose printing of FEA headers and generic header  items.   This
            option causes printing of all -l information, plus the following:
            Generic header types (along with their values), FEA field defini-
            tions,  field derivations (if relevant - see fea_deriv (1-ESPS)),
            and the reference header (if present - see, for example, the dis-
            cussion of variable.refhd in fea_stats (1-ESPS).  If -e is speci-
            fied together with -v, verbose printing also applies to  external
            EFILE headers.

            -x
            Enable debug output.

            -r start:end

            -r start:+incr
            Determines the range of data records  to  print.   In  the  first
            form, a pair of unsigned integers gives the first and last points
            of the range. If start is omitted, 1 is used.  If end is omitted,
            the  last  point  in  the  file  is  used.   The  second  form is
            equivalent to the first with end = start + incr.

            -t tag
            Only print the data record with the corresponding tag.  A warning
            message  is  printed  if this option is specified and the data is
            not tagged.

            -f field_name
            Print only the feature file field that matches  the  given  field
            name.  A warning is printed on stderr if the requested field name
            does not exist.   This  option  may  be  specified  as  often  as
            desired.


       9 .  REFERENCES

       1.   John Shore and Alan Parker, "Introduction to the Entropic  Signal
            Processing System," .



       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 21


       2.   "Entropic Signal Processing  System  Programming  Guidelines,"  ,
            ETM-S-86-14 .

       3.   "Parameter and Common  Files  in  ESPS,"  ,  ETM-S-86-12:jtb  1.2
            11/12/86.


















































       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 22


                                        APPENDIX



            The complete history of a file can be viewed using the -a  option
       on psps, which prints the full headers of all source files.  Here, for
       example, is the result for the output of the pipedemo script:

       File: psignal.spec

       ---Universal Part of Header---
       File type: FEA (Feature File)
       File header date: Tue Mar 20 15:45:56 1990 , header version: 1.73
       Produced by: me_spec, version: 1.4, of: 12/13/88, user: burton
       Hostname:path: sun4:/mc_u2/burton/esps/refcof
       Machine type: Sun4; file is in NATIVE format.
       Number of data records: 1
       Data is  tagged.
       refer file: <stdin>
       comment text:
        me_spec - psignal.spec
       Source files: <stdin>
       There is no reference header.

       ---Type Specific Part of Header (FEA)---
       fea_type: FEA_SPEC, segment_labeled: NO, field_count: 3

       ---Generic Part of Header---
       contin:  YES
       frame_meth:  FIXED
       freq_format:  SYM_EDGE
       frmlen:  2500
       num_freqs:  513
       order_unvcd:  100
       order_vcd:  0
       record_freq:  8
       sf:  20000
       spec_type:  DB
       src_sf:  20000
       start:  1
       start_time:  0.0625

        ----------------
        File: <stdin>

        ---Universal Part of Header---
        File type: FEA (Feature File)
        File header date: Tue Mar 20 15:45:55 1990 , header version: 1.73
        Produced by: refcof, version: 3.9, of: 1/22/93, user: burton
        Hostname:path: sun4:/mc_u2/burton/esps/refcof
        Machine type: Sun4; file is in NATIVE format.
        Number of data records: unknown (input is pipe)
        Data is  tagged.


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 23


        refer file: <stdin>
        comment text:
         refcof -o100 -p1:2500 -l0 - -
        Source files: <stdin>
        There is no reference header.

        ---Type Specific Part of Header (FEA)---
        fea_type: FEA_ANA, segment_labeled: NO, field_count: 8

        ---Generic Part of Header---
        DC_removed:  NO
        filters:  NO
        frmlen:  2500
        maxlpc:  1
        maxpulses:  1
        maxraw:  1
        method:  AUTOC
        nan:  2500
        order:  100
        order_unvcd:  100
        order_vcd:  0
        record_freq:  8
        spec_rep:  RC
        src_sf:  20000
        start:  1
        start_time:  0.0625
        step:  2500
        window_type:  WT_RECT

         ----------------
         File: <stdin>

         ---Universal Part of Header---
         File type: FEA (Feature File)
         File header date: Tue Mar 20 15:45:54 1990 , header version: 1.73
         Produced by: addsd, version: 3.12, of: 2/19/90, user: burton
         Hostname:path: sun4:/mc_u2/burton/esps/refcof
         Machine type: Sun4; file is in NATIVE format.
         Number of data records: unknown (input is pipe)
         Data is not tagged.
         comment text:
          addsd - psines.sd -
            Added samples from psines.sd to samples 1 - 2147483647 of <stdin>.
         Source files: <stdin>
                       psines.sd
         There is no reference header.

         ---Type Specific Part of Header (FEA)---
         fea_type: FEA_SD, segment_labeled: NO, field_count: 1

         ---Generic Part of Header---
         record_freq:  20000
         start_time:  0


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 24


          ----------------
          File: <stdin>

          ---Universal Part of Header---
          File type: FEA (Feature File)
          File header date: Tue Mar 20 15:45:54 1990 , header version: 1.73
          Produced by: testsd, version: 3.13, of: 12/6/89, user: burton
          Hostname:path: sun4:/mc_u2/burton/esps/refcof
          Machine type: Sun4; file is in NATIVE format.
          Number of data records: unknown (input is pipe)
          Data is not tagged.
          comment text:
           testsd -Tgauss -r20000 -
          There is no reference header.

          ---Type Specific Part of Header (FEA)---
          fea_type: FEA_SD, segment_labeled: NO, field_count: 1

          ---Generic Part of Header---
          level:  500
          max_value:  0
          record_freq:  20000
          seed:  1234567
          start_time:  0
          test_type:  GAUSS

          ----------------
          File: psines.sd

          ---Universal Part of Header---
          File type: FEA (Feature File)
          File header date: Tue Mar 20 15:45:52 1990 , header version: 1.73
          Produced by: addsd, version: 3.12, of: 2/19/90, user: burton
          Hostname:path: sun4:/mc_u2/burton/esps/refcof
          Machine type: Sun4; file is in NATIVE format.
          Number of data records: 8000
          Data is not tagged.
          comment text:
           addsd - psine1.sd psines.sd
             Added samples from psine1.sd to samples 1 - 2147483647 of <stdin>.
          Source files: <stdin>
                        psine1.sd
          There is no reference header.

          ---Type Specific Part of Header (FEA)---
          fea_type: FEA_SD, segment_labeled: NO, field_count: 1

          ---Generic Part of Header---
          record_freq:  20000
          start_time:  0

           ----------------
           File: <stdin>


       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 25


           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Tue Mar 20 15:45:51 1990 , header version: 1.73
           Produced by: testsd, version: 3.13, of: 12/6/89, user: burton
           Hostname:path: sun4:/mc_u2/burton/esps/refcof
           Machine type: Sun4; file is in NATIVE format.
           Number of data records: unknown (input is pipe)
           Data is not tagged.
           comment text:
            testsd -Tsine -f1100 -r20000 -
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_SD, segment_labeled: NO, field_count: 1

           ---Generic Part of Header---
           frequency:  1100
           level:  500
           max_value:  500
           phase:  0
           record_freq:  20000
           start_time:  0
           test_type:  SINE

           ----------------
           File: psine1.sd

           ---Universal Part of Header---
           File type: FEA (Feature File)
           File header date: Tue Mar 20 15:45:50 1990 , header version: 1.73
           Produced by: testsd, version: 3.13, of: 12/6/89, user: burton
           Hostname:path: sun4:/mc_u2/burton/esps/refcof
           Machine type: Sun4; file is in NATIVE format.
           Number of data records: 8000
           Data is not tagged.
           comment text:
            testsd -Tsine -r20000 -f600 psine1.sd
           There is no reference header.

           ---Type Specific Part of Header (FEA)---
           fea_type: FEA_SD, segment_labeled: NO, field_count: 1

           ---Generic Part of Header---
           frequency:  600
           level:  500
           max_value:  500
           phase:  0
           record_freq:  20000
           start_time:  0
           test_type:  SINE

       Record 1: tag: 1, tot_power: 516897, frame_len: 2500



       3.9                              ERL                           1/22/93







       RECORD KEEPING IN ESPS                                         page 26


       voiced:  NO

       freq                re_spec_valim_spec_val
       0.000000e+00        1.407048e+01
       1.953125e+01        1.404504e+01
       3.906250e+01        1.396749e+01
       5.859375e+01        1.383674e+01
        .
        .
        .
        .












































       3.9                              ERL                           1/22/93




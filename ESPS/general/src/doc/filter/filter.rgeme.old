.\"	refer -n -p filt.bib -e filter.rgeme | eqn | gpstt | iroff -me -D'prerasterization on' -S /tmp/filter.impress
.lo
.de SM          \"macro to shrink left margin
.br
.nr $i \\n($i+\\$1i
..
.de RM          \"macro to restore original left margin
.br
.nr $i 0
..
.de MS		\"macro for main section (sans serif bold)
.ft SB
.nf
\\$1
.sp -.8
.fi
..
.de SS		\"macro for sub-section (sans serif italics)
.ft SI
.nf
\\$1
.sp -.8
.fi
..
.sc
.he 'FILTERING APPLICATIONS NOTE''page %'
.fo '1.4'\ERL'7/28/89'
.nf
.ce 
\s+4\fBENTROPIC RESEARCH LABORATORY, INC.\fR\s-4
.sp .75i
.ce 100
\s+1\fBESPS APPLICATIONS NOTE: Filtering Sampled Data\fP\s-1
.sp .3i
\fIBrian Sublett and David Burton\fP
.sp .3i
Entropic Research Laboratory, Inc.
600 Pennsylvania Ave SE Suite 202
Washington DC 20003
(202) 547-1420
.sp .5i
.fi
.ft LR
.RM
.EQ
delim $$
.EN
.sh 1 "INTRODUCTION"
.sp 1
.pp
The Entropic Signal Processing System (ESPS) contains a variety of
programs used in the digital filtering of sampled data.  This
document introduces the reader to programs
that deal with filtering and illustrates their use
through some common examples.
.(f
\(co Copyright 1987, 1988 Entropic Speech, Inc., 1991 Entropic Research Laboraroty, Inc.; All rights reserved.  
.)f
.pp
Digital filters are characterized by their coefficients.  In ESPS,
these coefficients are usually stored in FILT (5\-\s-1ESPS\s+1) files.  Programs
that create FILT (5\-\s-1ESPS\s+1) files are called filter design programs.  These are 
discussed in Section 2.  Programs
that use FILT (5\-\s-1ESPS\s+1) files to perform the digital filtering operation are
called filtering programs, and Section 3 describes these programs.  
Finally, Section 4
discusses
programs used to calculate and plot the frequency response or
transfer
function of the coefficients in a FILT (5\-\s-1ESPS\s+1) file.
.sp 1
.sh 2 "User Level Programs"
.pp
ESPS includes the 
following user level 
programs that support the filtering of sampled data.  
Each of these programs is described in this document.
.nf
.ta 1.5i

\fInotch_filt\fP (1\-ESPS)	- Design a second order notch filter.
\fIwmse_filt\fP (1\-ESPS)	- Design an FIR filter using the weighted mean square error criterion.
\fIzero_pole\fP (1\-ESPS)	- Convert ASCII zero and pole locations to an ESPS FILT (5\-\s-1ESPS\s+1) file.
\fIimpulse_resp\fP (1\-ESPS)	  - Compute unit impulse responses of filters in FILT (5\-\s-1ESPS\s+1) file.
\fIatofilt\fP (1\-ESPS)		- Convert ASCII files to an ESPS FILT (5\-\s-1ESPS\s+1) file.
\fIiir_filt\fP (1\-ESPS)	- Design a Recursive (IIR) filter.
\fIfilter\fP (1\-ESPS)		- Perform digital filtering on a sampled data file.
\fIfft_filter\fP (1\-ESPS)	- Perform FIR digital filtering using frequency domain convolution.
\fIfiltspec\fP (1\-ESPS)	- Generate spectral record file for specified records in a FILT (5\-\s-1ESPS\s+1) file.

.fi
.sh 2 "Library Functions"
.pp
The following ESPS library functions support the use of filters.  Library
functions are not discussed in this document.  The user should refer to the appropriate
section 3 manual page for further help with filtering library functions.
.nf
.ta 2i

\fIallo_filt_rec\fP (3\-ESPS)	- Allocate memory for a FILT (5\-\s-1ESPS\s+1) file record.
\fIblock_filter\fP (3\-ESPS)	- Filter a data array.
\fIget_filt_rec\fP (3\-ESPS)	- Get the next data record from an ESPS FILT (5\-\s-1ESPS\s+1) file.
\fIinterp_filt\fP (3\-ESPS)	- Perform interpolation filtering on a data array.
\fIprint_filt_rec\fP (3\-ESPS)	- Print an ESPS FILT (5\-\s-1ESPS\s+1) record.
\fIput_filt_rec\fP (3\-ESPS)	- Put an ESPS FILT (5\-\s-1ESPS\s+1) record into a file.
\fIpz_to_co\fP (3-ESPS)		- Convert pole or zero locations to filter coefficients.

.fi
.sh 1 "FILTER DESIGN"
.pp
There are two kinds of filters often 
dicsussed in the literature and text books:
finite impulse response (FIR) and infinite impulse 
response (IIR).
FIR filters have only numerator coefficients, and are sometimes
called \fImoving-average\fR or \fIall-zero\fR filters.
IIR filters have denominator (and possibly numerator) coefficients,
and are also called \fIrecursive\fR filters.
ESPS programs provide design support for both types of filters,
and
this section describes those programs that calculate filter coefficients
and store them in FILT (5\-\s-1ESPS\s+1) files. 
.sp 1
.sh 2 "notch_filt"
.pp
The program 
.i "notch_filt (5\-\s-1ESPS\s+1)" 
designs a second order IIR filter
that removes or "notches out" a narrow region in the frequency
domain and passes all other frequencies.  This is done by placing
a zero on the unit circle in the Z-plane at a point corresponding to this
notch frequency, and then placing a pole very close to it and just
inside the unit circle.  The complex conjugates of this pole and zero
are also included to guarantee a filter with real coefficients.
The frequency response will therefore be zero when evaluated at the
zero frequencies, but nearly everywhere else on the unit circle,
the effects of the poles and zeroes will cancel.
.pp
To use 
.i notch_filt
, the user must specify the sampling frequency,
the notch frequency, the notch bandwidth, and, of course, 
the output
file name.  The notch bandwidth
is defined as the distance (in the frequency domain) between the
-6 dB. 
points on either side of the notch.  The three critical frequencies may
be specified on the command line or in a parameter file.  If all
three are specified on the command line, no
parameter file is necessary.
.sh 3 "notch_filt Example."
.pp
To illustrate the use of 
.i notch_filt, 
a filter will be designed to
remove 120 Hz noise from 8 kHz. sampled data.  The notch bandwidth will
be 20 Hz.  The command for this is:
.nf
.sp 1
.ul 2
    notch_filt -s8000 -n120 -b20 notch120.filt
.bp
.fi
.pp
The response for the resulting filter (in the file 
.i notch120.filt
) is
shown in Figure 2-1.  The commands used to obtain the plot in Figure 2-1
are covered in section 4.
.GP fig2-1.gps 3 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-1: Filter designed by notch_filt."
.sp 1
.sh 2 "wmse_filt"
.sp 1 
.pp
The program 
.i "wmse_filt (5\-\s-1ESPS\s+1)" 
designs an FIR filter of specified length using the
weighted mean-square-error criterion.  The user specifies
a desired frequency response and a weighting function and the program finds 
the set of filter coefficients 
whose response minimizes the mean square error with
respect to the desired response, when weighted by the weighting function.
In other words, for desired response
.i D(f)
and weighting function
.i W(f),
the program finds the coefficients of the filter
.i H(f)
which minimizes:
.nf
.ce
.if t \{
.EQ
int from W to -W ^{{left |^ D(f) - H(f) right | } sup 2 ~W(f)}~ df
.EN
\}
.if n \{
integral (from -W to W) of |D(f)-H(f)|(squared) * W(f) df
\}
.fi
If uniform weighting is used ( i.e. W(f) = 1 ),
the solution to the above equation will simply be the Inverse Discrete
Fourier Transform of
.i D(f),
truncated to the desired number of coefficients.
.pp
The user may specify 
the desired response and weighting function in one of two
modes: \fIprompt\fR and \fIpoints\fR.  
.pp
In "prompt mode" the program assumes that the desired response and
the weighting function are constant throughout a set of adjacent
frequency bands from zero to half the sampling frequency.
The user is prompted on
standard output for the sampling frequency, the number of 
frequency bands,
the edges of each band, the desired
magnitude response of each band, and the weighting value of each band. 
The user enters these values on standard input.
The first band always starts at zero and the last band always ends at
half the sampling frequency.
Since the bands are assumed contiguous, the user will only enter 
.i "nbands+1"
edges for
.i nbands
bands.
.pp
In "points mode" the program allows the desired response 
and weighting function to be arbitrarily shaped and to be specified at
a number of uniformly spaced points from zero to half the sampling frequency.
The number of points must be one plus a power of two.  The point values of
the desired response and the weighting function
are specified in two ASCII files.
The first number in each of these files
is an integer telling how many point values are
in the file, and the point values follow.
Data in both files may be separated by any combination
of spaces or newlines.  The desired response data
and the weighting function data may
be in the same file, in which case the desired response comes
first and the same file name must be given twice on the command line.
.pp
In either mode,
points on the desired response may be negative in order to cause the
resulting filter gain to be negative in that particular region.
No part of the weighting function may be negative, however.
.pp
Besides being easier, the prompt mode is more accurate than the 
points mode if the desired response
and the weighting function are in the right form  
(\fIi.e.\fR, piecewise constant functions).
This is because the design 
algorithm must calculate the convolution of two infinite
time domain functions.  The prompt mode uses an analytical
solution for this convolution, but the points mode only estimates it
using truncated versions of the two functions.  When using the points mode,
the accuracy of the solution can be increased by increasing the number of
points in the desired response and the weighting function.
.sp 1
.sh 3 "Prompt Mode Example."
.pp
To illustrate the "prompt mode" of operation, a simple band pass filter will
be designed.  The initial command line is shown below with the subsequent
computer prompts following in bold face and the user's responses in regular
type.  This example uses uniform weighting.
.sp 1
.ul
    wmse_filt  band_pass1.filt
.sp 1
.pp
.ft B
Please enter the number of coefficients: 
.ft
201
.pp
.ft B
Please enter the number of bands: 
.ft
3
.pp
.ft B
Please enter the sampling rate: 
.ft
8000
.pp
.ft B
Please enter the bandedges.
.ft
0 1000 2000 4000
.pp
.ft B
Please enter the band gains: 
.ft
0 1 0
.pp
.ft B
Please enter the band weights: 
.ft
1 1 1
.pp
.nf
.ft B
wmse_filt: Please enter comments.
.pp
.ft B
wmse_filt: Must be less than 2047 characters and terminated with ^D.
.ft
.pp
This is a bandpass filter with passband from 1 Khz.
.pp
to 2 Khz. The error was weighted uniformly.
.fi
.sp 1
.pp
The response for this filter is shown in Figure 2-2.
.pp
The user can obtain better stop band rejection by allowing the filter
response to roll off more slowly than in the above example.
This can be accomplished with 
.i wmse_filt 
by specifying transition
bands on either side of the passband, where the error is weighted
with a factor of zero.  This allows the filter design
algorithm to concentrate the zeroes in the regions of interest
since the error in the transition region can grow arbitrarily
large without affecting the total weighted error.  Note that the desired
response function is the same in this example as in the one above, even
though it is specified by using more bands.
.sp 1
.ul
    wmse_filt band_pass2.filt
.sp 1
.pp
.ft B
Please enter the number of coefficients: 
.ft
201
.pp
.ft B
Please enter the number of bands: 
.ft
5
.pp
.ft B
Please enter the sampling rate: 
.ft
8000
.pp
.ft B
Please enter the bandedges.
.ft
0 900 1000 2000 2100 4000
.pp
.ft B
Please enter the band gains: 
.ft
0 0 1 0 0
.pp
.ft B
Please enter the band weights: 
.ft
1 0 1 0 1
.pp
.nf
.ft B
wmse_filt: Please enter comments.
.pp
.ft B
wmse_filt: Must be less than 2047 characters and terminated with ^D.
.ft
.pp
This is a bandpass filter with passband from 1 Khz.
.pp
to 2 Khz. A 100 Hz. transition region was provided 
.pp
on either side of the passband with zero error weighting.
.fi
.sp 1
.pp
The response for this filter is shown in Figure 2-3.  Note that the
passband ripple has been reduced and the stop band attenuation has been
increased by about 30 dB.
.bp
.GP fig2-2.gps 3.5 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-2: Filter designed by wmse_filt."
.GP fig2-3.gps 3.5 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-3: Filter designed by wmse_filt."
.bp
.sh 3 "Points Mode Example."
.pp
In this section, a more complicated filter will be designed using the
"points mode" method.  
Suppose a filter with the characteristics shown in Figure 2-4
is desired.  This filter, with the amplitude response proportional to
frequency over the range of interest, could be used as an FM
demodulation filter.  
The weighting function shown in Figure 2-5 will again allow for a
transition band.
.pp
Before the filter can be designed, ASCII files must be created containing
the desired response and the weighting function.  For best results, the
number of points in these functions should be large.
These ASCII files can be created easily by using the Masscomp
utilities 
.i "gas (1G)" 
and 
.i "af (1G)."  
The 
.i gas 
command creates an additive
sequence of numbers and the 
.i af 
command performs arithmetic functions
on these sequences of numbers.  For this example, only 
.i gas 
is necessary.
The desired response function shown in Figure 2-4 contains 1025 points and
is created as follows:
.sp 1
.nf
cat  >  fm_des   (This puts the number of points at the beginning of the file.)
1025
^d
gas  -s0  -n820  -c1  -i0.012195121  >>  fm_des
gas  -s10  -n100  -c1  -i-0.1  >>  fm_des
gas  -s0  -n105  -c1  -i0  >>  fm_des
.fi
.sp 1
.pp
The weighting function shown in Figure 2-5 is created
below.
The transition band receives low weighting to improve performance
in the pass band and stop band.
.sp 1
.nf
cat  >  fm_wt
1025
^d
gas  -s1  -n820  -c1  -i0  >>  fm_wt
gas  -s0.1  -n100  -c1  -i0  >>  fm_wt
gas  -s1  -n105  -c1  -i0  >>  fm_wt
.fi
.sp 1
.pp
The filter is designed with the following command:
.sp 1
.nf
.ul
    wmse_filt -c "FM demodulator." -n 401 -d fm_des -w fm_wt fm_demod.filt
.fi
.sp
The comment
string following the \fI-c\fR 
option will be copied into the comment portion of the
output file header.  If the \fI-c\fR 
option had not been specified, the program
would have prompted for comments.
This allows the user to conveniently enter 
a much longer
description of the 
file contents; the comment is terminated by a control-d on the last line.
Many ESPS filter design programs have this mechanism for
adding comments to describe the designed filter.
The response for this 
filter is shown on a linear scale in Figure 2-6 and a decibel scale
in Figure 2-7.
.bp
.GP fig2-4.gps 3.5 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-4: Desired function input to wmse_filt."
.GP fig2-5.gps 3.5 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-5: Weighting function input to wmse_filt."
.bp
.GP fig2-6.gps 3.5 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-6: Designed with wmse_filt in the points mode."
.GP fig2-7.gps 3.5 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-7: Designed with wmse_filt in the points mode."
.bp
.sh 2 "zero_pole"
.pp
The program 
.i "zero_pole (5\-\s-1ESPS\s+1)"
allows the user to
design a filter by arbitrary placement of poles and zeroes in the
complex plane.  The user simply specifies the pole and zero locations
in one or two ASCII files, 
and the program computes the coefficients
and deposits them in a FILT (5\-\s-1ESPS\s+1) file.
.pp
The 
.i zero_pole 
program will be demonstrated by converting an
analog Butterworth filter to its discrete equivalent by using the bilinear
transformation.
.[
dsp tretter
.]
The analog filter is a sixth-order low-pass filter
with a 3-dB 
corner frequency at one eighth the sampling rate.  
After the transformation,
in the Z-domain
this filter has six zeroes at -1, and poles at the following locations:
.nf
.sp 1
        p0 = 0.597716978 + 0.577350268 i        p5 = p0 conjugate.
        p1 = 0.471404518 + 0.333333333 i        p4 = p1 conjugate.
        p2 = 0.420143458 + 0.108741129 i        p3 = p2 conjugate.
.sp 1
The filter is then designed with the following command:
.sp 1
.ul
    zero_pole -c "Sixth order Butterworth." -g 1  butter6.filt  butter6  butter6
.sp 1
.fi
.pp
The \fI-g\fR option is used above to insure that the filter coefficients are 
normalized to have unity gain at 0 Hz.  The ASCII file 
.i butter6
is shown below.  
Note that if zero and pole locations are both to be read out of
the same file, 
it must be given twice on the command line.  Also, for any pole
or zero off of the real axis, the complex conjugate is automatically included
and therefore should not be listed in the input ASCII file.
.sp 1
Contents of
.i  butter6:
.sp 1
.nf
6
-1.0  0.0
-1.0  0.0
-1.0  0.0
-1.0  0.0
-1.0  0.0
-1.0  0.0
3
0.597716978  0.577350268
0.471404518  0.333333333
0.420143458  0.108741129
.fi
.sp
.pp
The frequency response of this filter is shown in Figure 2-8.
.bp
.GP fig2-8.gps 3 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-8: Filter designed with zero_pole."
.sp 1
.sh 2 "impulse_resp"
.sp 1
.pp
The program 
.i "impulse_resp (5\-\s-1ESPS\s+1)"
is used to calculate the impulse response of a filter.  A specified number of
points on the impulse response are calculated and written either to an
output FILT (5\-\s-1ESPS\s+1) file, to be used as an FIR filter, or to an SD (sampled data)
file for plotting in the time domain.  As an example, the Butterworth 
filter designed in the last section will be converted to an FIR filter
using 
.i impulse_resp.
.pp
To obtain another FILT (5\-\s-1ESPS\s+1) file from butter6.filt:
.sp 1
.ul
    impulse_resp -n 100  butter6.filt  butter6_fir.filt
.sp 1
.pp
The response for this filter is shown in Figure 2-9.  If the user wishes to
plot the impulse response in the time domain, the following command should
be used to obtain an SD file:
.sp 1
.ul
    impulse_resp  -s  -n 100  butter6.filt  butter6_fir.sd
.sp 1
This file is plotted in Figure 2-10 using 
.i "plotsd (5\-\s-1ESPS\s+1)".
.bp
.GP fig2-9.gps 3.5 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-9: Designed with impulse_resp."
.GP fig2-10.gps 3.5 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-10: SD file created by impulse_resp."
.bp
.sh 2 "atofilt"
.sp 1
.pp
The program
.i "atofilt (5\-\s-1ESPS\s+1)"
is used to convert a set of known filter coefficients into a FILT (5\-\s-1ESPS\s+1) file.  The
coefficients may be placed in one or two ASCII files, or may be typed
in directly from the standard input.  The user is strongly advised to
use the comment facility of this program to record
information about the coefficients in the file header.
.pp
An example command line would be:
.sp 1
.ul
    atofilt  filter1.filt  filter1.num  filter1.den
.sp 1
Since the \fI-c\fR 
option is not used above, the user will be prompted for his
comments.
.sh 2 "iir_filt"
.sp 1
.pp
The program
.i "iir_filt (5\-\s-1ESPS\s+1)"
designs digital IIR filters by first designing 
Butterworth or Chebyshev analog filters and then converting
them to digital
filters by using the bilinear transformation.
\fIIir_filt \fR supports the design of 
low pass (LP), high pass (HP), band pass (BP), and band stop (BS)
filters.
The user must specify the sampling frequency, the filter type (\fIe.g.\fR
Butterworth), filter response type (\fIe.g.\fR low pass), and the order 
of the filter.
These design parameters may be specified in a 
parameter file, but the easiest way to design IIR filters is
by invoking \fIiir_filt\fR with the \fIeparam (1\-\s-1ESPS\s+1)\fR
command. By doing this,
the user is prompted for all the design parameters.
.pp
The design of a sixth-order low-pass Butterworth filter 
with a 3-dB cutoff frequency equal to 1000 Hz.
(identical to the one shown in Figure 2-8) is shown below
to illustrate the procedure. As before,
the initial command line is shown below with the subsequent
computer prompts following in bold face and the user's responses in regular
type.
.sp 1
.ul
    eparam iir_filt Bworth6.filt
.sp 1
.pp
.ft B
Desired filter order. [3]:
.ft
6
.pp
.ft B
Desired sampling frequency. [8000.0]:
.ft
.pp
.ft B
Desired pass pand gain. [1.0]:
.ft
.pp
.ft B
Desired filter type: BUTTERWORTH or CHEBYSHEV1. [BUTTERWORTH]:
.ft
.pp
.ft B
Desired filter response: LP, HP, BP, or BS. [LP]:
.ft
.pp
.ft B
3 dB (BUTTERWORTH) or critical (CHEBYSHEV) freqs. [0] <250.0>:
.ft
1000
.pp
.ft B
3 dB (BUTTERWORTH) or critical (CHEBYSHEV) freqs. [1] <0.0>:
.ft
.sp 1
.pp
Only one 3-dB frequency is required for LP and HP filter
designs;
the reply to the prompt for a second 3-dB frequency is 
ignored by \fIiir_filt\fR.
Also notice,
several of the defaults (\fIe.g.\fR filter response \- LP)
were appropriate for the desired filter,
so simply hitting return is enough to specify those parameters.
The filter response is shown below in Figure 2-11.
.bp
.GP fig2-11.gps 3 6 0 0
.GE
.sp 1
.ce
.b "Figure 2-11: Butterworth filter designed with iir_filt."
.sp 2
.sh 1 "FILTERING PROGRAMS"
.sp 1
.pp
This section describes the two programs that may be 
used to filter sampled data:
.i "filter (5\-\s-1ESPS\s+1)"
and
.i "fft_filter (5\-\s-1ESPS\s+1)".
\fIFft_filter (5\-\s-1ESPS\s+1)\fR
works with FIR filters only, but \fIfilter (5\-\s-1ESPS\s+1)\fR
works with both IIR and FIR fitlers.
.sp 1
.sh 2 "filter"
.sp 1
.pp
The program 
.i "filter (1-ESPS)"
is used to perform a digital filtering operation on sampled data.
The program implements FIR or IIR filters and may  read its
coefficients from a FILT (5\-\s-1ESPS\s+1) file, or from a parameter file.
.pp
The program may also implement upsampling or downsampling filters
to raise or lower the sampling rate 
of the data.  Upsample filtering, or interpolation,
means that
the appropriate number of zero samples are inserted between each data sample
and the resulting data is then filtered to smooth the
resulting
data sequence and interpolate the values between the original
data values. By doing this the sampling rate of the
signal is increased.  
Downsample filtering, or decimation, 
means that 
the signal is first band limited by a digital filtering operation
and then the data is decimated to the correct
sampling rate by removing samples from the data sequence.
This results in a signal at a lower sampling rate.
.pp
The following example converts a 48 kHz. sampled signal
into a 32 kHz. sampled signal by increasing the sampling
rate to 96 kHz. (2 X 48 kHz.), 
filtering the data with a 16 kHz. low pass
filter, and decimating the signal down to 32 kHz. (96 kHz. / 3)
by keeping
every third sample.
The 16 kHz. low pass filter coefficients are read from a FILT (5\-\s-1ESPS\s+1) file called 
.i interp.filt.
.sp 1n
.ul
    filter  -i 2/3  -Finterp.filt  speech48.sd  speech32.sd
.sp 1
It is assumed here that the FILT (5\-\s-1ESPS\s+1) file
.i interp.filt
contains only one filter record.  This means that it is unnecessary to
use the -f option, which specifies the set of coefficients in the FILT (5\-\s-1ESPS\s+1)
file to use.
.pp
In the above example, 
the starting point and the number of points to process
from the input sampled data file are read from the parameter file
below.
Setting 
.i nan
= 0 will cause all the data in
.i speech48.sd
to be processed.
.sp 1
Contents of
.i params:
.sp 1
.nf
# This file processes all of the data.
int start = 1 : "Starting point for analysis.";
int nan = 0 : "Number of points to process.";
.fi
.sp 1
.pp
The following command reads IIR filter coefficients from a parameter file
and filters the data.  This time the 
sampling rate of the output file matches that of the input file.
Note that the filter must be named on the command line to extract
the correct set of coefficients from the parameter file.
.sp 1
.ul
    filter  -P params.filt  -f low_pass  brian_speech.sd  fbrian_speech.sd
.sp 1
The parameter file 
.i params.filt
is shown below.  In this example the filtering
operation begins at the 10,000th point in the input file and processes
20,000 points.
.sp 1
Contents of
.i params.filt:
.sp 1
.nf
# Don't do the whole file.
int start = 10000 : "Starting point for analysis.";
int nan = 20000 : "Number of points to process.";

# Define the filter.  Third order Butterworth.
int low_pass_nsiz = 4 : "Number of numerator coefficients. ";
int low_pass_dsiz = 2 : "Number of denominator coefficients. ";
float low_pass_num = {0.166666, 0.5, 0.5, 0.166666} : "Numerator coefficients.";
float low_pass_den = {1.0, 0.33333} : "Denominator coefficients. ";
.fi
.sp 2
.sh 2 "fft_filter"
.pp
The program
.i "fft_filter (5\-\s-1ESPS\s+1)"
implements FIR filtering operations on sampled data by performing the
convolution in the frequency domain rather in the time domain as
.i filter
does.  This algorithm is computationally more efficient than that
used by 
.i filter
when the number of filter coefficients is large.  If 
$N sub 1$
is the number of data points to process and
$N sub 2$
is the size of the filter, the regular filtering algorithm requires
on the order of
${N sub 1}{N sub 2}$
multiplications.  
By contrast the algorithm used by
.i fft_filter
requires only about
$2{N sub 1} log {N sub 2} + {N sub 1}$
multiplications.
.[
dsp tretter
%P 298-303
.]
In experimental results on a Masscomp 5600 system, filtering 100,000
samples,
.i fft_filter
required only one eighth as much time as
.i filter
to implement a 401 point filter and 25 % less time to implement a 51 point 
filter.  In implementing an 11 point filter, however,
.i fft_filter
was only half as fast as
.i filter.
.pp
The command below illustrates the use of 
.i fft_filter.
Note that if the -F option is used to specify the filter coefficients
and the \fI-p\fR option is used to specify the range of data points, no
parameter file is necessary.  The command below causes all of the
data in the file to be processed.
.sp 1
.ul
    fft_filter -F low_pass.filt -p1:  input.sd  output.sd
.sp 2
.sh 1 "FILTER SPECTRAL RESPONSES"
.pp
The program 
.i "filtspec (5\-\s-1ESPS\s+1)"
is used to find the frequency response of a filter.  The program reads
coefficients from a FILT (5\-\s-1ESPS\s+1) file and produces an output FEA_SPEC (5\-\s-1ESPS\s+1) file.  The
program 
.i "plotspec (5\-\s-1ESPS\s+1)"
can then be used to plot the response on a terminal
or printer.
.pp
Here are the
commands used to produce the
plots shown in this document.
.nf
.sp 1
.b "Figure 2-1:"
.ul 3
filtspec  -s 8000  -n 8193  notch120.filt  notch120.spec
plotspec  -t "Notch centered at 120 Hz. with 20 Hz. bandwidth." -T imagen  notch120.spec
.sp 1
.b "Figure 2-2:"
.ul 3
filtspec  -s 8000  bandpass1.filt  bandpass1.spec
plotspec  -y -100:50  -t "201 point bandpass filter."  -t "Uniform error weighting, 
    no transition band."  -T imagen  bandpass1.spec
.sp 1
.b "Figure 2-3:"
.ul 3
filtspec  -s 8000  bandpass2.filt  bandpass2.spec
plotspec  -y -100:50  -t "201 point bandpass filter."  -t "100 Hz. transition bands."
    -T imagen  bandpass2.spec
.sp 1
.b "Figure 2-6:"
.ul 3
filtspec  -s 20000  -m l  fm_demod.filt  fm_demod.spec
plotspec  -t "401 point FM demodulation filter."  -t "Linear scale."  -T imagen  fm_demod.lspec
.sp 1
.b "Figure 2-7:"
.ul 3
filtspec  -y -100:50  -s 20000  fm_demod.filt  fm_demod.spec
plotspec  -t "401 point FM demodulation filter."  -t "Decibel Scale."  -T imagen  fm_demod.spec
.sp 1
.b "Figure 2-8:"
.ul 3
filtspec  -s 8000  butter6.filt  butter6.spec
plotspec  -y -100:50  -t "6th order Butterworth filter."  -T imagen  butter6.filt
.sp 1
.b "Figure 2-9:"
.ul 3
filtspec  -s 8000  butter6_fir.filt  butter6_fir.spec
plotspec  -y -100:50  -t "FIR version of 6th order Butterworth filter."  -T imagen  butter6_fir.spec
.sp 1
.b "Figure 2-10:"
.ul 2
plotsd -t"Impulse response of butter6.filt." -T imagen butter6_fir.sd
.sp 1
.b "Figure 2-11:"
.ul 3
filtspec Bworth6.filt Bworth6.spec
plotspec -y -100:50 -t "IIR version of 6th order Butterworth filter." -T imagen Bworth6.spec
.fi
.sp 1
.sh 1 "REFERENCES"
.[
$LIST$
.]

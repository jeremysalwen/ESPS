.\" Copyright (c) 1990 Entropic Research Laboratory, Inc.
.\" @(#)next_slide.1	1.1	11/8/90	ERL
.TH NEXT_SLIDE 1 90/09/25
.ds ]W "\fI\s+4\ze\h'0.05'e\s-4\v'-0.4m'\fP\(*p\v'0.4m'\ Entropic Research Laboratory, Inc.
.SH "NAME"
next_slide \- cause \fIxloadimage\fP to advance to the next slide.
.SH "SYNOPSIS"
.B next_slide
[
.I wait
]
.SH "DESCRIPTION"
.PP
.I next_slide
is used with a modified version of the
.I xloadimage
program to control advancing from one image to the next in a
program-controlled slideshow.
The programs are used in a shell script as follows.
.nf
.IP
next_slide 0
xloadimage \-prog_slideshow file_1 ... file_n &
\&... <commands> ...
next_slide
\&... <more commands> ...
next_slide
\&... <etc.> ...
.fi
.LP
The reason for the initial
.I next_slide 0
is explained further down.
The
.I xloadimage
line starts the program as a background process and with the images
to be displayed as arguments;
.I xloadimage
displays a blank frame, and the first group of commands following the
.I xloadimage
line is executed.
The first
.I next_slide
command
.I after
the invocation of
.I xloadimage
causes
.I xloadimage
to begin processing the first image,
which replaces the blank frame on the screen.
The second group of commands, indicated by
.I <more commands>,
begins execution while the first image is being processed.
The second next_slide command causes
.I xloadimage
to begin processing the second image.
Execution of the shell script continues in this way, with invocations of
.I next_slide
alternating with other commands.
The number of
.I next_slide
commands after the
.I xloadimage
line
.RI ( i.e.
not counting the initial
.IR "next_slide 0" )
should be one more than the number of image files to be displayed.
The last
.I next_slide
causes the last image to be taken down, and
.I xloadimage
terminates.
.PP
The two programs communicate with a semaphore
that has four states:  "Busy", "Ready", "Pause", and "Quit".
(For those who care about the details, this is implemented
as a property named "XLOADIM_READY" that is set on the root window.
See section 10.1 of the
.I Xlib Programming Manual
for more information.)
The value is normally supposed to be "Busy" when
.I xloadimage
is not running or is processing an input file in preparation for displaying it.
The value is normally supposed to be "Ready" when a slide is on the screen and
.I xloadimage
is waiting for the command to begin processing the next image.
To this end
.I xloadimage
sets the value to "Busy" during initialization and just before exiting;
it sets the value to "Ready" just after sending an image to the screen.
When
.I next_slide
runs, it waits, if necessary, for the value to become "Ready" and then
changes the value to "Busy".
When the value changes, the window system automatically notifies
.I xloadimage
of the change, and
.I xloadimage
begins processing the next file, if any, or else exits.
.PP
.I next_slide
normally does not wait indefinitely for the semaphore to become "Ready".
After a maximum waiting time in the "Busy" state, 60 seconds by default,
.I next_slide
concludes that
.I xloadimage
is not running and simply exits.
However, if the semaphore state is "Pause",
.I next_slide
will wait indefinitely, regardless of the maximum.
Typing 'p' (for "pause") to
.I xloadimage
sets the semaphore to "Pause" and prevents a subsequent invocation of
.I next_slide
from causing an advance to the next image.
Typing 'c' (for "continue") changes the semaphore to "Ready",
and any waiting invocation of
.I next_slide
then triggers the advance.
A non-default value for the maximum waiting time can be specified in seconds
on the command line.
.PP
Typing 'q' (for "quit") to
.I xloadimage
sets the semaphome to "Quit" and exits from
.I xloadimage.
If
.I next_slide
detects the "Quit" state, it changes the semaphore to "Busy" and exits.
.PP
.I next_slide
returns exit status 0 after setting the semaphore from "Ready to "Busy"
to bring up the next image.  It returns exit status 1 after
detecting a "Quit", after timing out, and in case of various other
errors.  Thus writing
.nf
.IP
next_slide || exit 1
.fi
.LP
in the shell script in place of simply
.nf
.IP
next_slide
.fi
.LP
will cause an exit from the shell script at that point if "Quit" is detected.
.PP
As a special case, a command-line argument of 0 causes
.I next_slide
to set the semaphore to "Busy" and return exit status 0 immediately,
without a timeout message.
The reason for putting
.I next_slide 0
in the shell script before the invocation of
.I xloadimage
is to guard against confusion that is possible when an earlier run of
.I xloadimage
has been terminated abnormally or with a typed 'q',
leaving the semaphore in a state other than "Busy" with
.I xloadimage
not running.
.SH "FUTURE CHANGES"
.PP
.SH "SEE ALSO"
.PP
xloadimage(1)
.SH "BUGS"
.PP
After
.I next_slide
runs, there is a processing delay of several seconds before the next
image actually becomes visible.  During that period, a 'p' typed to
.I xloadimage
will cause the image being processed to remain visible once it comes up;
it will not affect the image that is actually visible at the time.
Similarly, a 'q' typed to
.I xloadimage
during a processing period does not take effect until the processing
is complete.
.SH "REFERENCES"
.PP
A. Nye,
.I "Xlib Programming Manual for Version 11 of the X Window System,"
O'Reilly & Associates, Sebastopol, Calif., 1990.
.SH "AUTHOR"
.PP
Rod Johnson, Entropic Research Laboratory, Inc.
.SH "COPYRIGHT"
Copyright (c) 1990 Entropic Research Laboratory, Inc.
.PP
The
.I next_slide
program is copyrighted material covered by a copyright and disclaimer
of liability similar to that used by the MIT X Consortium.  Briefly,
unlimited free use, copying, and distribution are allowed provided
that the copyright notice and disclaimer are left intact.  See
the source files for complete information.  The
.I next_slide
program is free software; it is \fInot\fP a part of ESPS or the
.I waves+
software package, and fees paid to ERL as part of ESPS or
.I waves+
license agreements do \fInot\fP include any payments for
.I next_slide.

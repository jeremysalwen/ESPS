.\" Copyright (c) 1989-1990 Entropic Speech, Inc.
.\" Copyright (c) 1997 Entropic Research Laboratory, Inc. All rights reserved.
.\" @(#)iscomplex.3	1.3 16 May 1997 ESI/ERL
.ds ]W (c) 1997 Entropic Research Laboratory, Inc.
.TH "IS_COMPLEX" 3\-ESPSu 16 May 1997
.SH "NAME"
.nf
is_file_complex \- does file contain any complex data types
is_field_complex \- is data type of field complex
is_type_complex\- does type code represent complex data
.SH "SYNOPSIS"
.ft B
#include <esps/esps.h>
.br
#include <esps.fea.h>

.sp
.nf
int
is_file_complex(hd)
struct header *hd;
.sp
int
is_field_complex(hd, name)
struct header *hd;
char *name;
.sp
int
is_type_complex(type)
int type;
.fi
.ft R
.SH "DESCRIPTION"
These functions
test for complex data.
\fIis_file_complex\fP returns YES if any field
in the file pointed to by the header is a complex valued field;
otherwise it returns NO.
\fIis_field_complex\fP returns YES if the named field
in the file pointed to by the header is a complex valued field; it returns NO
otherwise.
\fIis_type_complex\fP returns YES if the type argument
corresponds to a complex data type; otherwise it returns NO.
.SH "EXAMPLE"
.nf

int type;
char *name = "samples";
char *infile;
struct header *hd;
FILE *fp;

	/*open file (argv[optind]) for reading and read header (hd)*/
	infile = eopen(argv[0], argv[optind++], "r", FT_FEA, FEA_SD, &hd, &fp);

	/*check if file contains any complex valued data fields*/
	if(is_file_complex(hd) == YES){
	   Fprintf(stderr, "files contains complex data");
        }

	/*check if the field "samples" is complex*/
	if(is_field_complex(hd, name) == YES){
	   Fprintf(stderr, "field "samples" is complex");
	}

	/*check if the data type of field "samples" is complex*/
	type = get_fea_type("samples", hd);
	if(is_type_complex(type) == YES){
	    Fprintf(stderr, "samples" is a complex data field");
	}

.fi
.SH DIAGNOSTICS
.PP
None.
.SH "SEE ALSO"
.na
.IR is_type_numeric (3\-ESPSu),
.IR cover_type (3\-ESPSu)
.SH "AUTHOR"
.PP
Manual page by David Burton. Code by Alan Parker
